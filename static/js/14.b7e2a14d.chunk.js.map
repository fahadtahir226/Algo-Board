{"version":3,"sources":["Screens/Sets/LongestCommonSubsequence.js","../node_modules/react-bootstrap/esm/CardDeck.js","Algorithms/LongestCommonSubsequence.js"],"names":["LongestCommonSubsequence","_useState","useState","_useState2","Object","_home_maxplanko89_Desktop_ALGO_Algo_Project_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","str1","setStr1","_useState3","_useState4","str2","setStr2","_useState5","_useState6","commonStr","setCommonStr","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_hoc_Aux__WEBPACK_IMPORTED_MODULE_6__","react_bootstrap__WEBPACK_IMPORTED_MODULE_2__","react_bootstrap__WEBPACK_IMPORTED_MODULE_3__","_App_components_MainCard__WEBPACK_IMPORTED_MODULE_7__","title","react_bootstrap__WEBPACK_IMPORTED_MODULE_4__","md","react_bootstrap__WEBPACK_IMPORTED_MODULE_5__","Group","controlId","Label","Control","defaultValue","id","onChange","firstSeq","document","getElementById","value","longestCommonSubsequence","split","join","type","placeholder","Text","className","secondSeq","length","_createWithBsPrefix__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","set1","set2","lcsMatrix","Array","fill","map","columnIndex","rowIndex","Math","max","longestSequence","unshift","d"],"mappings":"uLA4EeA,UArEkB,WAAM,IAAAC,EACbC,mBAAS,IADIC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9BK,EAD8BH,EAAA,GACxBI,EADwBJ,EAAA,GAAAK,EAEbN,mBAAS,IAFIO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE9BE,EAF8BD,EAAA,GAExBE,EAFwBF,EAAA,GAAAG,EAGHV,mBAAS,IAHNW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG9BE,EAH8BD,EAAA,GAGnBE,EAHmBF,EAAA,GAerC,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,MAAM,8BAAZ,8OAOJP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,MAAM,SACVP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKI,GAAI,IACPT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpBZ,EAAAC,EAAAC,cAACQ,EAAA,EAAKG,MAAN,qBACAb,EAAAC,EAAAC,cAACQ,EAAA,EAAKI,QAAN,CACEC,aAAczB,EACd0B,GAAG,OACHC,SAjCH,WACjB,IAAIC,EAAWC,SAASC,eAAe,QAAQC,MAC/C9B,EAAQ2B,GACRnB,EAAauB,YAAyBJ,EAASK,MAAM,IAAK7B,EAAK6B,MAAM,KAAKC,KAAK,MA+B3DC,KAAK,OACLC,YAAY,iBAEd1B,EAAAC,EAAAC,cAACQ,EAAA,EAAKiB,KAAN,CAAWC,UAAU,cAArB,8BAEF5B,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCACpBZ,EAAAC,EAAAC,cAACQ,EAAA,EAAKG,MAAN,sBACAb,EAAAC,EAAAC,cAACQ,EAAA,EAAKI,QAAN,CACEC,aAAcrB,EACdsB,GAAG,OACHC,SAvCH,WACjB,IAAIY,EAAYV,SAASC,eAAe,QAAQC,MAChD1B,EAAQkC,GACR9B,EAAauB,YAAyBhC,EAAKiC,MAAM,IAAKM,EAAUN,MAAM,KAAKC,KAAK,MAqC5DC,KAAK,OACLC,YAAY,iBAEd1B,EAAAC,EAAAC,cAACQ,EAAA,EAAKiB,KAAN,CAAWC,UAAU,cAArB,mCAMV5B,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,MAAM,UACVP,EAAAC,EAAAC,cAAA,KAAG0B,UAAU,QAAQ9B,EAAUgC,OAAS,EAAI,MAAQhC,0CCnElE,IAAAiC,EAAAC,EAAA,IACeC,EAAA,EAAA7C,OAAA2C,EAAA,GAAkB,8CCIlB,SAAST,EAAyBY,EAAMC,GAOrD,IALA,IAAMC,EAAYC,MAAMF,EAAKL,OAAS,GACnCQ,KAAK,MACLC,IAAI,kBAAMF,MAAMH,EAAKJ,OAAS,GAAGQ,KAAK,QAGhCE,EAAc,EAAGA,GAAeN,EAAKJ,OAAQU,GAAe,EACnEJ,EAAU,GAAGI,GAAe,EAI9B,IAAK,IAAIC,EAAW,EAAGA,GAAYN,EAAKL,OAAQW,GAAY,EAC1DL,EAAUK,GAAU,GAAK,EAI3B,IAAK,IAAIA,EAAW,EAAGA,GAAYN,EAAKL,OAAQW,GAAY,EAC1D,IAAK,IAAID,EAAc,EAAGA,GAAeN,EAAKJ,OAAQU,GAAe,EAC/DN,EAAKM,EAAc,KAAOL,EAAKM,EAAW,GAC5CL,EAAUK,GAAUD,GAAeJ,EAAUK,EAAW,GAAGD,EAAc,GAAK,EAE9EJ,EAAUK,GAAUD,GAAeE,KAAKC,IACtCP,EAAUK,EAAW,GAAGD,GACxBJ,EAAUK,GAAUD,EAAc,IAO1C,IAAKJ,EAAUD,EAAKL,QAAQI,EAAKJ,QAE/B,MAAO,CAAC,IAOV,IAJA,IAAMc,EAAkB,GACpBJ,EAAcN,EAAKJ,OACnBW,EAAWN,EAAKL,OAEbU,EAAc,GAAKC,EAAW,GAC/BP,EAAKM,EAAc,KAAOL,EAAKM,EAAW,IAE5CG,EAAgBC,QAAQX,EAAKM,EAAc,IAC3CA,GAAe,EACfC,GAAY,GACHL,EAAUK,GAAUD,KAAiBJ,EAAUK,GAAUD,EAAc,GAEhFA,GAAe,EAGfC,GAAY,EAIhB,OAAOG,EA5DTZ,EAAAc,EAAAb,EAAA,sBAAAX","file":"static/js/14.b7e2a14d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport longestCommonSubsequence from \"../../Algorithms/LongestCommonSubsequence\";\n\nconst LongestCommonSubsequence = () => {\n  const [str1, setStr1] = useState(\"\");\n  const [str2, setStr2] = useState(\"\");\n  const [commonStr, setCommonStr] = useState(\"\");\n\n  const updateStr1 = () => {\n    let firstSeq = document.getElementById(\"str1\").value;\n    setStr1(firstSeq);\n    setCommonStr(longestCommonSubsequence(firstSeq.split(\"\"), str2.split(\"\")).join(\"\"));\n  };\n  const updateStr2 = () => {\n    let secondSeq = document.getElementById(\"str2\").value;\n    setStr2(secondSeq);\n    setCommonStr(longestCommonSubsequence(str1.split(\"\"), secondSeq.split(\"\")).join(\"\"));\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Longest Common Subsequence\">\n            Longest Common Subsequence Problem has two sequences and we have to find the length of\n            longest subsequence present in both of them. A subsequence is a sequence that appears in\n            the same relative order, but not necessarily contiguous.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\">\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>First String</Form.Label>\n                      <Form.Control\n                        defaultValue={str1}\n                        id=\"str1\"\n                        onChange={updateStr1}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input First String</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                      <Form.Label>Second String</Form.Label>\n                      <Form.Control\n                        defaultValue={str2}\n                        id=\"str2\"\n                        onChange={updateStr2}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Second String</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">\n              <p className=\"ml-3\">{commonStr.length < 1 ? \"---\" : commonStr}</p>\n            </Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LongestCommonSubsequence;\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');","/**\n * @param {string[]} set1\n * @param {string[]} set2\n * @return {string[]}\n */\nexport default function longestCommonSubsequence(set1, set2) {\n  // Init LCS matrix.\n  const lcsMatrix = Array(set2.length + 1)\n    .fill(null)\n    .map(() => Array(set1.length + 1).fill(null));\n\n  // Fill first row with zeros.\n  for (let columnIndex = 0; columnIndex <= set1.length; columnIndex += 1) {\n    lcsMatrix[0][columnIndex] = 0;\n  }\n\n  // Fill first column with zeros.\n  for (let rowIndex = 0; rowIndex <= set2.length; rowIndex += 1) {\n    lcsMatrix[rowIndex][0] = 0;\n  }\n\n  // Fill rest of the column that correspond to each of two strings.\n  for (let rowIndex = 1; rowIndex <= set2.length; rowIndex += 1) {\n    for (let columnIndex = 1; columnIndex <= set1.length; columnIndex += 1) {\n      if (set1[columnIndex - 1] === set2[rowIndex - 1]) {\n        lcsMatrix[rowIndex][columnIndex] = lcsMatrix[rowIndex - 1][columnIndex - 1] + 1;\n      } else {\n        lcsMatrix[rowIndex][columnIndex] = Math.max(\n          lcsMatrix[rowIndex - 1][columnIndex],\n          lcsMatrix[rowIndex][columnIndex - 1]\n        );\n      }\n    }\n  }\n\n  // Calculate LCS based on LCS matrix.\n  if (!lcsMatrix[set2.length][set1.length]) {\n    // If the length of largest common string is zero then return empty string.\n    return [\"\"];\n  }\n\n  const longestSequence = [];\n  let columnIndex = set1.length;\n  let rowIndex = set2.length;\n\n  while (columnIndex > 0 || rowIndex > 0) {\n    if (set1[columnIndex - 1] === set2[rowIndex - 1]) {\n      // Move by diagonal left-top.\n      longestSequence.unshift(set1[columnIndex - 1]);\n      columnIndex -= 1;\n      rowIndex -= 1;\n    } else if (lcsMatrix[rowIndex][columnIndex] === lcsMatrix[rowIndex][columnIndex - 1]) {\n      // Move left.\n      columnIndex -= 1;\n    } else {\n      // Move up.\n      rowIndex -= 1;\n    }\n  }\n\n  return longestSequence;\n}\n"],"sourceRoot":""}