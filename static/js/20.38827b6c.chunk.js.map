{"version":3,"sources":["Screens/Sets/BalancedPartition.js","Algorithms/BalancedPartition.js","Samples.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["LongestIncreasingSubsequence","useState","seq","setSeq","partitions","setPartitions","init","setInit","updatePartitions","data","document","getElementById","value","split","map","item","parseInt","isNaN","length","pop","result","arr","sum","reduce","total","num","part","Array","fill","row","i","j","console","log","balancedPartition","Row","Col","title","md","CardDeck","isOption","setSample","sampleNum","BalancedPartitionSample","join","Form","Group","Label","Control","defaultValue","id","onChange","type","placeholder","Text","className","twoStringSample","longestIncreasingSequenceSample","createWithBsPrefix"],"mappings":"iNAkEeA,UA1DsB,KAAO,MAAD,EACnBC,mBAAS,IADU,mBAClCC,EADkC,KAC7BC,EAD6B,OAELF,oBAAS,GAFJ,mBAElCG,EAFkC,KAEtBC,EAFsB,OAGjBJ,oBAAS,GAHQ,mBAGlCK,EAHkC,KAG5BC,EAH4B,KAKnCC,EAAmB,KACvB,IAAIC,EAAOC,SAASC,eAAe,oBAAoBC,MAAMC,MAAM,KACnEJ,EAAOA,EAAKK,IAAKC,GAASC,SAASD,IAE/BE,MAAMR,EAAKA,EAAKS,OAAS,KAAKT,EAAKU,MAEvC,IAAIC,EChBO,SAAsBC,GAGnC,IAAIC,EAAMD,EAAIE,OAAO,CAACC,EAAOC,IAAQD,EAAQC,EAAK,GAGlD,GAAIH,EAAM,IAAM,EAAG,OAAO,EAE1B,IAAII,EAAOC,MAAML,EAAM,EAAI,GAAGM,KAAKD,MAAMN,EAAIH,OAAS,IAItDQ,EAAKZ,IAAKe,GAASA,EAAI,IAAK,GAI5BH,EAAK,GAAKC,MAAMN,EAAIH,OAAS,GAAGU,MAAK,GAGrC,IAAK,IAAIE,EAAI,EAAGA,GAAKR,EAAM,EAAGQ,IAC5B,IAAK,IAAIC,EAAI,EAAGA,GAAKV,EAAIH,OAAQa,IAC/BL,EAAKI,GAAGC,GAAKL,EAAKI,GAAGC,EAAI,GACrBD,GAAKT,EAAIU,EAAI,KAAIL,EAAKI,GAAGC,GAAKL,EAAKI,GAAGC,IAAML,EAAKI,EAAIT,EAAIU,EAAI,IAAIA,EAAI,IAS7E,OADAC,QAAQC,IAAIP,GACLA,EAAKJ,EAAM,GAAGD,EAAIH,QDfVgB,CAAkBzB,GAC/BuB,QAAQC,IAAIb,GACZf,EAAce,GACdb,GAAQ,IAQV,OACE,kBAAC,IAAD,KACE,kBAAC4B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,sBAAZ,kLAMJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,GAAI,IACP,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMF,MAAM,QAAQG,UAAQ,EAACC,UAnBpBC,IACjBV,QAAQC,IAAIS,GACZvC,EAAOwC,IAAwBD,GAAWE,KAAK,MAC/CpC,MAiBU,kBAACqC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,yBACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,aAAc/C,EACdgD,GAAG,mBACHC,SAAU3C,EACV4C,KAAK,OACLC,YAAY,UAEd,kBAACR,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,uCAIN,kBAAC,IAAD,CAAMlB,MAAM,UAAU/B,EAAQF,EAAa,WAAa,eAAkB,a,gCE1DtF,sGAAO,MAAMuC,EAA0B,CACrC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAICa,EAAkB,CAC7B,CACE,wFACA,mGAEF,CACE,qGACA,gGAEF,CACE,wFACA,4FAEF,CACE,uFACA,iGAEF,CACE,mGACA,qGAEF,CACE,gGACA,sGAEF,CACE,yGACA,4GAEF,CACE,iGACA,qHAEF,CACE,8HACA,sHAEF,CACE,mHACA,6HAISC,EAAkC,CAC7C,CACE,IACC,GACD,EACA,GACA,GACA,GACA,GACC,IACA,GACD,GACA,GACA,GACA,KACC,IACA,GACD,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACA,EACA,IACC,IACA,GACD,IACC,GACD,GACA,GACC,IACA,GACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,EACD,GACA,GACA,GACA,IACC,GACD,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,GACD,GACA,IA2FA,IAEF,CACE,IACC,GACD,EACA,GACA,GACC,GACD,GACA,IACC,GACD,EACA,GACA,IACC,GACD,IACC,GACD,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACC,GACD,IACC,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,EACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,IACA,GACD,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,EACG,IACA,IACA,IACA,EACD,GACC,GACD,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,GACD,GACA,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACC,IACA,EACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IAEH,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,GACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACC,GACD,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACC,EACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACA,EACA,IACC,GACD,IACC,GACD,EACA,IACC,IACA,IACA,GACD,GACA,GACC,GACD,IAEF,CACE,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,IACC,GACD,IACC,GACA,IACA,EACD,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACC,EACD,IACC,GACD,GACA,EACA,IACC,GACD,IACC,IACA,EACD,EACA,GACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,IACC,GACD,IACC,GACD,IACC,EACD,IACC,GACD,GACA,IACC,GACD,IACC,IACA,EACD,GACA,EACA,GACA,IAEF,EACG,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,EACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,EACA,IAEF,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,IACA,EACD,GACA,GACA,IACC,GACD,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACC,GACD,GACA,EACA,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,IACC,IACA,GACD,EACA,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,EACD,GACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACC,GACD,IACC,IACA,EACD,EACA,IACC,GACD,IACC,GACD,M,gCCh7BJ,YACeC,gBAAmB","file":"static/js/20.38827b6c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport balancedPartition from \"../../Algorithms/BalancedPartition\";\nimport { BalancedPartitionSample } from \"../../Samples\";\n\nconst LongestIncreasingSubsequence = () => {\n  const [seq, setSeq] = useState(\"\");\n  const [partitions, setPartitions] = useState(false);\n  const [init, setInit] = useState(false);\n\n  const updatePartitions = () => {\n    let data = document.getElementById(\"balancePartition\").value.split(\" \");\n    data = data.map((item) => parseInt(item));\n\n    if (isNaN(data[data.length - 1])) data.pop();\n\n    let result = balancedPartition(data);\n    console.log(result);\n    setPartitions(result);\n    setInit(true);\n  };\n  const setSample = (sampleNum) => {\n    console.log(sampleNum);\n    setSeq(BalancedPartitionSample[sampleNum].join(\" \"));\n    updatePartitions();\n    // setPartitions(balancedPartition(BalancedPartitionSample[sampleNum]));\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Balanced Partition\">\n            Given a set of integers, partition those integers into two parts where the difference\n            between the two parts is minimum. This problem is known as balanced partition problem.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n          <CardDeck>\n            <Card title=\"Input\" isOption setSample={setSample}>\n              <Form>\n                <Form.Group>\n                  <Form.Label>Partition Number</Form.Label>\n                  <Form.Control\n                    defaultValue={seq}\n                    id=\"balancePartition\"\n                    onChange={updatePartitions}\n                    type=\"text\"\n                    placeholder=\"10...\"\n                  />\n                  <Form.Text className=\"text-muted\">Kindly Input The Partition Space</Form.Text>\n                </Form.Group>\n              </Form>\n            </Card>\n            <Card title=\"Output\">{init ? (partitions ? \"Possible\" : \"Not Possible\") : \"---\"}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LongestIncreasingSubsequence;\n","// A Dynamic Programming based\n// Returns true if arr[] can be partitioned in two subsets of equal sum, otherwise false\n\nexport default function findPartiion(arr) {\n  // console.log(arr);\n  // Calculate sum of all elements\n  let sum = arr.reduce((total, num) => total + num, 0);\n\n  // check if total output isn't even we can't divide\n  if (sum % 2 !== 0) return false;\n\n  let part = Array(sum / 2 + 1).fill(Array(arr.length + 1));\n  // bool part[sum / 2 + 1][n + 1];\n\n  // initialize leftmost column,\n  part.map((row) => (row[0] = false));\n  // console.log(\"something\", part);\n\n  // initialize top row as true\n  part[0] = Array(arr.length + 1).fill(true);\n\n  // Fill the partition table in bottom up manner\n  for (let i = 1; i <= sum / 2; i++) {\n    for (let j = 1; j <= arr.length; j++) {\n      part[i][j] = part[i][j - 1];\n      if (i >= arr[j - 1]) part[i][j] = part[i][j] || part[i - arr[j - 1]][j - 1];\n    }\n  }\n\n  // uncomment this part to print table\n  // for (i = 0; i <= sum / 2; i++) {\n  //   for (j = 0; j <= arr.length; j++) console.log(part[i][j]);\n  // }\n  console.log(part);\n  return part[sum / 2][arr.length];\n}\n","export const BalancedPartitionSample = [\n  [1, 2, 3], // valid\n  [2, 3, 4], // not valid\n  [2, 3, 4], // not valid\n  [1, 2, 4, 1], // valid\n  [9, 2, 4, 5], // not valid\n  [9, 0, 4, 5], //valid\n  [1, 4, 2, 5], // not valid\n  [2, 5, 1, 2], // valid\n  [6, 2, 4, 1], // not valid\n  [5, 1, 8, 2], // valid\n];\n\n// Longest Common Subsequence, Shortest Common Supersequence\nexport const twoStringSample = [\n  [\n    \"AFAFAHHAHFADAFAFTAHHAHHAFAFFDAFAFHADDAAFAFFAFADAFAFAHHAHHADDAAFAFFAHDAADFARDHDAIADAAD\",\n    \"FATDAFAFAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDAAFAFFDAFARRRRFHADDAAFAFFAHDAADHADAAID\",\n  ],\n  [\n    \"FAAFADDAAFAFFAHDATTTADFADAFRRRRAFAHFAHHAHHAHAHIIIIIFADAFAFAHHAHHAAFAFFTTTTDAFAFHARRRRDDHDAADHADAAD\",\n    \"FAFAAHHADDAAFAFFAADFADAFADAFTRIAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHHADAADFAFAHHAHHADDTRIAAHDAAD\",\n  ],\n  [\n    \"FADAFAAFFAHTTTTTFADAFAFAHHAHFAIIIIIIIAAFAHHRIRIRIDDAAFFAFFDAFAFHADDTITIFFAHDAADHADAAD\",\n    \"FADAFAFAHHATADAFAFFAHDAADFADAFATITIHHAHHADDFADAFAFAHRIRIRIFAFFDAFAFHTRIAAFAFFAHDAADAAAAD\",\n  ],\n  [\n    \"FAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDFAFFDAFAFHADDAADAFAFAHHAHHADDAFAFFAHDHADAAD\",\n    \"FADAFAFAHHAHHADDAAFAFFAHAFADAFAFAHHAHHADDAAFAFFDAFAFHADDAAFAFFAHDAADADFADAFAFAHHAHHADDFAHDAAD\",\n  ],\n  [\n    \"FADAFAFAHHARITIRITIFITIRFTIRFRIRFAHHARITIFARIFFFAHDAADFHHADDAAFAFFDAFAFHRIRITIAAFAFFAHDAADHADAAD\",\n    \"FADAFFADAFAFAHHAHFAITIAIFTRHDTTFAFAHHRITITIHADAADAFAHHAHHADDAITITRITIRDFADAFAFAHHAHHADDAAFAFFAHDA\",\n  ],\n  [\n    \"FADAFAADDAAFAFFAHDAADFADAFAAITIAIFTRFAFAHHAHHADDAAFAFFFAHHAHHDAITIAIFTRFADDAAFAFFAHDAADHADAAD\",\n    \"FHAHHADDAAFAFFAHDAADAAITIAIFTRHHAFADAFAFAHAITIRIITIFATIAHHADDAAFAFFAHDAADFADAFAFAHHAHHAAITIAIFTRAD\",\n  ],\n  [\n    \"FAAITIAIFTRADAFAFAHHAHFADAFAFAAITIAIFTRAHHAFAFAHHAHHADDAAFAFFAHDAADFADDAAFAFFDAFAFHADFAFFAHDAADHRTIRFD\",\n    \"FADATIRITIRFITIRFATIFTAFAHHAHHADDAAFAFFAFADAFAFAHHAHHADDAAFAITIAIFTRFFAHDAADFADAFAFAHHAHHADAADADFAHHAAFA\",\n  ],\n  [\n    \"FADAFTRIFTIFFAHDAADFADAFAFHAHFADAFTFIRITIAFAHHAHHADFAHHAHHADDAAFAFFDAFAFHADDAAFARTIRFAADHADAAD\",\n    \"FAHHAHHADDAAFAFFAHDAADFADAFATRIFITIFHFADAFAFAHHAHHADDAAFATRITIFIFAHDAADFADAFAFAHTRITIFIAADHADDAAFAFTRIRITIFAHDAAD\",\n  ],\n  [\n    \"FAADFADAFAFAHHTAHRFIIRITFARDAFATFAHHAIHTHAIDDAFIRRITADAIFAFAHHTAHHAIDDAARFAFFAIFIRITHYDAFRAFFDHADDAFIRITAFAFFAHDAADHAIDATAD\",\n    \"FADAFAFAHFIRITHAHHADDAAFAFFDAFFIRITAFHADDAAFAFFFIRITFADAFAFAHFIRITHAHHADDAAFATTFFDAFIAIFHRIADDAAFATIFFAHDAADAHDAAD\",\n  ],\n  [\n    \"HHFIRITAHHADDAAFAFFAHFIRITDAADFADFADRAFAFAIAFAFATHHAHIFADARFAFAHHTAHHIADDAATFAFFRDAFIAFHADIDIFFATHDTAARDIHADRAAD\",\n    \"FADAFHHAHHAFIRITDDAAFAFFAHDAAFIRITDIFFAFRAHHTAHHADIDAAFRAFFAFIADAFTAFAHHTAHHADDAAFAFIFAHDARADFIADAFRAFAHHIAHTHADAADHDAAD\",\n  ],\n];\n\nexport const longestIncreasingSequenceSample = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    -39,\n    -36,\n    73,\n    12,\n    92,\n    100,\n    -64,\n    -33,\n    86,\n    85,\n    1,\n    -34,\n    91,\n    74,\n    -37,\n    42,\n    57,\n    -31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    -67,\n    -62,\n    28,\n    8,\n    86,\n    -32,\n    -65,\n    48,\n    -60,\n    23,\n    2,\n    -35,\n    -67,\n    96,\n    5,\n    89,\n    12,\n    -36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    -39,\n    -69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    -38,\n    -66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    -32,\n    14,\n    -32,\n    50,\n    51,\n    9,\n    43,\n    -34,\n    4,\n    -65,\n    86,\n    94,\n    28,\n    29,\n    -35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    -3,\n    53,\n    -65,\n    -3,\n    51,\n    52,\n    11,\n    19,\n    -32,\n    46,\n    -67,\n    -35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    -30,\n    -69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    -3,\n    75,\n    82,\n    19,\n    -63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    -38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    -3,\n    52,\n    -62,\n    -38,\n    21,\n    85,\n  ][\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    -30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    -34,\n    0,\n    12,\n    -35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    -37,\n    93,\n    -36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    -33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    -67,\n    91,\n    24,\n    28,\n    -67,\n    48,\n    -30,\n    74,\n    90,\n    28,\n    73,\n    -33,\n    59,\n    98,\n    96,\n    12,\n    -69,\n    -65,\n    -37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    -65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91)\n  ],\n  [\n    58,\n    -31,\n    8,\n    88,\n    0,\n    -68,\n    91,\n    81,\n    -34,\n    1,\n    11,\n    82,\n    -39,\n    90,\n    -33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    -37,\n    88,\n    57,\n    -32,\n    8,\n    -39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    -3,\n    43,\n    99,\n    0,\n    -35,\n    93,\n    -30,\n    -30,\n    91,\n    -66,\n    88,\n    -32,\n    89,\n    94,\n    -3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    -31,\n    -66,\n    -30,\n    -62,\n    13,\n    21,\n    -69,\n    29,\n    86,\n    50,\n    89,\n    -65,\n    92,\n    29,\n    -64,\n    -66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    -68,\n    -31,\n    93,\n  ],\n  [\n    -66,\n    -35,\n    -68,\n    -6,\n    0,\n    -62,\n    75,\n    -36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    -32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    -3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    -31,\n    -32,\n    -63,\n    44,\n    56,\n    -68,\n    86,\n    84,\n    -60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    -69,\n    -6,\n    59,\n    4,\n    14,\n    70,\n    -63,\n    10,\n    94,\n    92,\n    -61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    -61,\n    82,\n    70,\n    12,\n    8,\n    -64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    -68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    -60,\n  ],\n  [\n    45,\n    -38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    -63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    -35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    -6,\n    76,\n    20,\n    -30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    -69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    -39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    -32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    -38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    -32,\n    9,\n    -30,\n    26,\n    50,\n    -3,\n    50,\n    79,\n    -31,\n    94,\n    40,\n    7,\n    49,\n    -3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    -67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    -69,\n    92,\n    89,\n    2,\n    86,\n    -34,\n    28,\n    81,\n    95,\n    -39,\n    21,\n    -30,\n    98,\n    81,\n    -38,\n    75,\n    -61,\n    89,\n    2,\n    -6,\n    79,\n    88,\n    -62,\n    43,\n    -62,\n    95,\n    47,\n    19,\n    1,\n    -69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    -61,\n    93,\n    -61,\n    71,\n    17,\n    -39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    -68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    -60,\n    70,\n    42,\n    -30,\n    71,\n    2,\n    48,\n    -39,\n    96,\n    -38,\n    2,\n    59,\n    -69,\n    -68,\n    -62,\n    90,\n    2,\n    -30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    -69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    -67,\n    95,\n    47,\n    -39,\n    16,\n    -3,\n    -39,\n    -6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    -61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    -64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    -62,\n    81,\n    4,\n    -3,\n    80,\n    -33,\n    79,\n    1,\n    71,\n    -69,\n    40,\n    -34,\n    -3,\n    1,\n    7,\n    -62,\n    46,\n    85,\n    43,\n    -67,\n    50,\n    -62,\n    57,\n    -61,\n    94,\n    -60,\n    73,\n    -3,\n    15,\n    -60,\n    83,\n    55,\n    -38,\n    87,\n    -61,\n    -6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    -65,\n    -38,\n    99,\n    -63,\n    13,\n    -63,\n    76,\n    24,\n    -66,\n    -65,\n    84,\n    15,\n    26,\n    -32,\n    90,\n    -61,\n    90,\n    84,\n    29,\n    46,\n    -60,\n    29,\n    17,\n    56,\n    -38,\n    98,\n    57,\n    99,\n    49,\n    -63,\n    76,\n    -62,\n    54,\n    22,\n    -34,\n    -32,\n    5,\n    -61,\n    73,\n    86,\n    -30,\n    -64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    -6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    -63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    -60,\n    18,\n    82,\n    14,\n    -30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    -39,\n    4,\n    83,\n    -63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    -36,\n    -66,\n    4,\n    80,\n  ],\n  [\n    81,\n    -65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    -65,\n    -33,\n    -3,\n    18,\n    59,\n    83,\n    -64,\n    72,\n    23,\n    52,\n    -6,\n    21,\n    53,\n    17,\n    -61,\n    89,\n    57,\n    8,\n    -64,\n    93,\n    1,\n    71,\n    -65,\n    59,\n    91,\n    -37,\n    78,\n    -67,\n    13,\n    19,\n    12,\n    1,\n    -39,\n    20,\n    -32,\n    -32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    -6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    -37,\n    -3,\n    5,\n    -65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    -65,\n    -33,\n    1,\n    -38,\n    41,\n    -39,\n    -3,\n    0,\n    48,\n    -60,\n    99,\n    -66,\n    52,\n  ],\n];\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}