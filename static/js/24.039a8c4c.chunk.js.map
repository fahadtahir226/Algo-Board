{"version":3,"sources":["Algorithms/LongestIncreasingSubsequence.js","Screens/Sets/LongestIncreasingSubsequence.js","Samples.js"],"names":["dpLongestIncreasingSubsequence","sequence","lengthsArray","Array","length","fill","previousElementIndex","currentElementIndex","newLength","longestIncreasingLength","i","LongestIncreasingSubsequence","useState","seq","setSeq","longest","setLongest","key","values","graphData","setGraphData","Row","Col","title","md","isOption","setSample","sampleNum","graph","console","log","longestIncreasingSequenceSample","join","longestIncreasingSubsequence","forEach","y","x","push","Form","Group","Label","Control","defaultValue","id","onChange","data","document","getElementById","value","split","map","item","parseInt","isNaN","pop","type","placeholder","Text","className","tooltip","enabled","datum","height","showValues","showControls","BalancedPartitionSample","twoStringSample"],"mappings":"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CA,GACA,IACC,IACA,GACD,GACA,EACA,IACC,IACA,GACD,IACC,GACD,GACA,GACC,IACA,GACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,EACD,GACA,GACA,GACA,IACC,GACD,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,GACD,GACA,IAEF,CA0FE,IAEF,CACE,IACC,GACD,EACA,GACA,GACC,GACD,GACA,IACC,GACD,EACA,GACA,IACC,GACD,IACC,GACD,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACC,GACD,IACC,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,EACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,IACA,GACD,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,EACG,IACA,IACA,IACA,EACD,GACC,GACD,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,GACD,GACA,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACC,IACA,EACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IAEH,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,GACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACC,GACD,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACC,EACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACA,EACA,IACC,GACD,IACC,GACD,EACA,IACC,IACA,IACA,GACD,GACA,GACC,GACD,IAEF,CACE,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,IACC,GACD,IACC,GACA,IACA,EACD,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACC,EACD,IACC,GACD,GACA,EACA,IACC,GACD,IACC,IACA,EACD,EACA,GACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,IACC,GACD,IACC,GACD,IACC,EACD,IACC,GACD,GACA,IACC,GACD,IACC,IACA,EACD,GACA,EACA,GACA,IAEF,EACG,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,EACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,EACA,IAEF,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,IACA,EACD,GACA,GACA,IACC,GACD,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACC,GACD,GACA,EACA,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,IACC,IACA,GACD,EACA,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,EACD,GACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACC,GACD,IACC,IACA,EACD,EACA,IACC,GACD,IACC,GACD","file":"static/js/24.039a8c4c.chunk.js","sourcesContent":["/**\n * Dynamic programming approach to find longest increasing subsequence.\n * Complexity: O(n * n)\n *\n * @param {number[]} sequence\n * @return {number}\n */\nexport default function dpLongestIncreasingSubsequence(sequence) {\n  // Create array with longest increasing substrings length and\n  // fill it with 1-s that would mean that each element of the sequence\n  // is itself a minimum increasing subsequence.\n  const lengthsArray = Array(sequence.length).fill(1);\n\n  let previousElementIndex = 0;\n  let currentElementIndex = 1;\n\n  while (currentElementIndex < sequence.length) {\n    if (sequence[previousElementIndex] < sequence[currentElementIndex]) {\n      // If current element is bigger then the previous one then\n      // current element is a part of increasing subsequence which\n      // length is by one bigger then the length of increasing subsequence\n      // for previous element.\n      const newLength = lengthsArray[previousElementIndex] + 1;\n      if (newLength > lengthsArray[currentElementIndex]) {\n        // Increase only if previous element would give us bigger subsequence length\n        // then we already have for current element.\n        lengthsArray[currentElementIndex] = newLength;\n      }\n    }\n\n    // Move previous element index right.\n    previousElementIndex += 1;\n\n    // If previous element index equals to current element index then\n    // shift current element right and reset previous element index to zero.\n    if (previousElementIndex === currentElementIndex) {\n      currentElementIndex += 1;\n      previousElementIndex = 0;\n    }\n  }\n\n  // Find the biggest element in lengthsArray.\n  // This number is the biggest length of increasing subsequence.\n  let longestIncreasingLength = 0;\n\n  for (let i = 0; i < lengthsArray.length; i += 1) {\n    if (lengthsArray[i] > longestIncreasingLength) {\n      longestIncreasingLength = lengthsArray[i];\n    }\n  }\n\n  return longestIncreasingLength;\n}\n","import React, { useState } from \"react\";\nimport { Row, Col, Form } from \"react-bootstrap\";\nimport NVD3Chart from \"react-nvd3\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport longestIncreasingSubsequence from \"../../Algorithms/LongestIncreasingSubsequence\";\nimport { longestIncreasingSequenceSample } from \"../../Samples\";\n\nconst LongestIncreasingSubsequence = () => {\n  const [seq, setSeq] = useState([]);\n  const [longest, setLongest] = useState(0);\n  const [graphData, setGraphData] = useState([\n    {\n      key: \"\",\n      values: [],\n    },\n  ]);\n\n  const updateLIS = () => {\n    let graph = {\n        key: \"Number\",\n        values: [],\n      },\n      data = document.getElementById(\"longest_increasing_sequence\").value;\n    setSeq(data);\n\n    data = data.split(\" \").map((item) => parseInt(item));\n    if (isNaN(data[data.length - 1])) data.pop();\n    setLongest(longestIncreasingSubsequence(data));\n    data.forEach((value, key) => {\n      graph.values.push({ x: key, y: value });\n    });\n    setGraphData([graph]);\n  };\n  const setSample = (sampleNum) => {\n    let graph = {\n      key: \"Number\",\n      values: [],\n    };\n    console.log(sampleNum);\n    setSeq(longestIncreasingSequenceSample[sampleNum].join(\" \"));\n    setLongest(longestIncreasingSubsequence(longestIncreasingSequenceSample[sampleNum]));\n    longestIncreasingSequenceSample[sampleNum].forEach((y, x) => {\n      graph.values.push({ x, y });\n    });\n    setGraphData([graph]);\n  };\n\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Longest Increasing Subsequence\">\n            The Longest Increasing Subsequence (LIS) problem is to find the length of the longest\n            subsequence of a given sequence such that all elements of the subsequence are sorted in\n            increasing order.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n          <Card title=\"Input\" isOption setSample={setSample}>\n            <Row>\n              <Col>\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Number Series</Form.Label>\n                    <Form.Control\n                      defaultValue={seq}\n                      id=\"longest_increasing_sequence\"\n                      onChange={updateLIS}\n                      type=\"text\"\n                      placeholder=\"1 2 3 ...\"\n                    />\n                    <Form.Text className=\"text-muted\">Kindly Input Numbers with space</Form.Text>\n                  </Form.Group>\n                </Form>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card title=\"Output\">\n            Longest Increasing Subsequence: {longest}\n            <NVD3Chart\n              tooltip={{ enabled: true }}\n              type=\"multiBarChart\"\n              datum={graphData}\n              x=\"x\"\n              y=\"y\"\n              height={300}\n              showValues\n              showControls={false}\n            />\n          </Card>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LongestIncreasingSubsequence;\n","export const BalancedPartitionSample = [\n  [1, 2, 3], // valid\n  [2, 3, 4], // not valid\n  [2, 3, 4], // not valid\n  [1, 2, 4, 1], // valid\n  [9, 2, 4, 5], // not valid\n  [9, 0, 4, 5], //valid\n  [1, 4, 2, 5], // not valid\n  [2, 5, 1, 2], // valid\n  [6, 2, 4, 1], // not valid\n  [5, 1, 8, 2], // valid\n];\n\n// Longest Common Subsequence, Shortest Common Supersequence\nexport const twoStringSample = [\n  [\n    \"AFAFAHHAHFADAFAFTAHHAHHAFAFFDAFAFHADDAAFAFFAFADAFAFAHHAHHADDAAFAFFAHDAADFARDHDAIADAAD\",\n    \"FATDAFAFAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDAAFAFFDAFARRRRFHADDAAFAFFAHDAADHADAAID\",\n  ],\n  [\n    \"FAAFADDAAFAFFAHDATTTADFADAFRRRRAFAHFAHHAHHAHAHIIIIIFADAFAFAHHAHHAAFAFFTTTTDAFAFHARRRRDDHDAADHADAAD\",\n    \"FAFAAHHADDAAFAFFAADFADAFADAFTRIAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHHADAADFAFAHHAHHADDTRIAAHDAAD\",\n  ],\n  [\n    \"FADAFAAFFAHTTTTTFADAFAFAHHAHFAIIIIIIIAAFAHHRIRIRIDDAAFFAFFDAFAFHADDTITIFFAHDAADHADAAD\",\n    \"FADAFAFAHHATADAFAFFAHDAADFADAFATITIHHAHHADDFADAFAFAHRIRIRIFAFFDAFAFHTRIAAFAFFAHDAADAAAAD\",\n  ],\n  [\n    \"FAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDFAFFDAFAFHADDAADAFAFAHHAHHADDAFAFFAHDHADAAD\",\n    \"FADAFAFAHHAHHADDAAFAFFAHAFADAFAFAHHAHHADDAAFAFFDAFAFHADDAAFAFFAHDAADADFADAFAFAHHAHHADDFAHDAAD\",\n  ],\n  [\n    \"FADAFAFAHHARITIRITIFITIRFTIRFRIRFAHHARITIFARIFFFAHDAADFHHADDAAFAFFDAFAFHRIRITIAAFAFFAHDAADHADAAD\",\n    \"FADAFFADAFAFAHHAHFAITIAIFTRHDTTFAFAHHRITITIHADAADAFAHHAHHADDAITITRITIRDFADAFAFAHHAHHADDAAFAFFAHDA\",\n  ],\n  [\n    \"FADAFAADDAAFAFFAHDAADFADAFAAITIAIFTRFAFAHHAHHADDAAFAFFFAHHAHHDAITIAIFTRFADDAAFAFFAHDAADHADAAD\",\n    \"FHAHHADDAAFAFFAHDAADAAITIAIFTRHHAFADAFAFAHAITIRIITIFATIAHHADDAAFAFFAHDAADFADAFAFAHHAHHAAITIAIFTRAD\",\n  ],\n  [\n    \"FAAITIAIFTRADAFAFAHHAHFADAFAFAAITIAIFTRAHHAFAFAHHAHHADDAAFAFFAHDAADFADDAAFAFFDAFAFHADFAFFAHDAADHRTIRFD\",\n    \"FADATIRITIRFITIRFATIFTAFAHHAHHADDAAFAFFAFADAFAFAHHAHHADDAAFAITIAIFTRFFAHDAADFADAFAFAHHAHHADAADADFAHHAAFA\",\n  ],\n  [\n    \"FADAFTRIFTIFFAHDAADFADAFAFHAHFADAFTFIRITIAFAHHAHHADFAHHAHHADDAAFAFFDAFAFHADDAAFARTIRFAADHADAAD\",\n    \"FAHHAHHADDAAFAFFAHDAADFADAFATRIFITIFHFADAFAFAHHAHHADDAAFATRITIFIFAHDAADFADAFAFAHTRITIFIAADHADDAAFAFTRIRITIFAHDAAD\",\n  ],\n  [\n    \"FAADFADAFAFAHHTAHRFIIRITFARDAFATFAHHAIHTHAIDDAFIRRITADAIFAFAHHTAHHAIDDAARFAFFAIFIRITHYDAFRAFFDHADDAFIRITAFAFFAHDAADHAIDATAD\",\n    \"FADAFAFAHFIRITHAHHADDAAFAFFDAFFIRITAFHADDAAFAFFFIRITFADAFAFAHFIRITHAHHADDAAFATTFFDAFIAIFHRIADDAAFATIFFAHDAADAHDAAD\",\n  ],\n  [\n    \"HHFIRITAHHADDAAFAFFAHFIRITDAADFADFADRAFAFAIAFAFATHHAHIFADARFAFAHHTAHHIADDAATFAFFRDAFIAFHADIDIFFATHDTAARDIHADRAAD\",\n    \"FADAFHHAHHAFIRITDDAAFAFFAHDAAFIRITDIFFAFRAHHTAHHADIDAAFRAFFAFIADAFTAFAHHTAHHADDAAFAFIFAHDARADFIADAFRAFAHHIAHTHADAADHDAAD\",\n  ],\n];\n\nexport const longestIncreasingSequenceSample = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    -39,\n    -36,\n    73,\n    12,\n    92,\n    100,\n    -64,\n    -33,\n    86,\n    85,\n    1,\n    -34,\n    91,\n    74,\n    -37,\n    42,\n    57,\n    -31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    -67,\n    -62,\n    28,\n    8,\n    86,\n    -32,\n    -65,\n    48,\n    -60,\n    23,\n    2,\n    -35,\n    -67,\n    96,\n    5,\n    89,\n    12,\n    -36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    -39,\n    -69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    -38,\n    -66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    -32,\n    14,\n    -32,\n    50,\n    51,\n    9,\n    43,\n    -34,\n    4,\n    -65,\n    86,\n    94,\n    28,\n    29,\n    -35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    -3,\n    53,\n    -65,\n    -3,\n    51,\n    52,\n    11,\n    19,\n    -32,\n    46,\n    -67,\n    -35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    -30,\n    -69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    -3,\n    75,\n    82,\n    19,\n    -63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    -38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    -3,\n    52,\n    -62,\n    -38,\n    21,\n    85,\n  ],\n  [\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    -30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    -34,\n    0,\n    12,\n    -35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    -37,\n    93,\n    -36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    -33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    -67,\n    91,\n    24,\n    28,\n    -67,\n    48,\n    -30,\n    74,\n    90,\n    28,\n    73,\n    -33,\n    59,\n    98,\n    96,\n    12,\n    -69,\n    -65,\n    -37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    -65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91),\n  ],\n  [\n    58,\n    -31,\n    8,\n    88,\n    0,\n    -68,\n    91,\n    81,\n    -34,\n    1,\n    11,\n    82,\n    -39,\n    90,\n    -33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    -37,\n    88,\n    57,\n    -32,\n    8,\n    -39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    -3,\n    43,\n    99,\n    0,\n    -35,\n    93,\n    -30,\n    -30,\n    91,\n    -66,\n    88,\n    -32,\n    89,\n    94,\n    -3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    -31,\n    -66,\n    -30,\n    -62,\n    13,\n    21,\n    -69,\n    29,\n    86,\n    50,\n    89,\n    -65,\n    92,\n    29,\n    -64,\n    -66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    -68,\n    -31,\n    93,\n  ],\n  [\n    -66,\n    -35,\n    -68,\n    -6,\n    0,\n    -62,\n    75,\n    -36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    -32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    -3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    -31,\n    -32,\n    -63,\n    44,\n    56,\n    -68,\n    86,\n    84,\n    -60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    -69,\n    -6,\n    59,\n    4,\n    14,\n    70,\n    -63,\n    10,\n    94,\n    92,\n    -61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    -61,\n    82,\n    70,\n    12,\n    8,\n    -64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    -68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    -60,\n  ],\n  [\n    45,\n    -38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    -63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    -35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    -6,\n    76,\n    20,\n    -30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    -69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    -39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    -32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    -38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    -32,\n    9,\n    -30,\n    26,\n    50,\n    -3,\n    50,\n    79,\n    -31,\n    94,\n    40,\n    7,\n    49,\n    -3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    -67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    -69,\n    92,\n    89,\n    2,\n    86,\n    -34,\n    28,\n    81,\n    95,\n    -39,\n    21,\n    -30,\n    98,\n    81,\n    -38,\n    75,\n    -61,\n    89,\n    2,\n    -6,\n    79,\n    88,\n    -62,\n    43,\n    -62,\n    95,\n    47,\n    19,\n    1,\n    -69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    -61,\n    93,\n    -61,\n    71,\n    17,\n    -39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    -68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    -60,\n    70,\n    42,\n    -30,\n    71,\n    2,\n    48,\n    -39,\n    96,\n    -38,\n    2,\n    59,\n    -69,\n    -68,\n    -62,\n    90,\n    2,\n    -30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    -69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    -67,\n    95,\n    47,\n    -39,\n    16,\n    -3,\n    -39,\n    -6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    -61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    -64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    -62,\n    81,\n    4,\n    -3,\n    80,\n    -33,\n    79,\n    1,\n    71,\n    -69,\n    40,\n    -34,\n    -3,\n    1,\n    7,\n    -62,\n    46,\n    85,\n    43,\n    -67,\n    50,\n    -62,\n    57,\n    -61,\n    94,\n    -60,\n    73,\n    -3,\n    15,\n    -60,\n    83,\n    55,\n    -38,\n    87,\n    -61,\n    -6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    -65,\n    -38,\n    99,\n    -63,\n    13,\n    -63,\n    76,\n    24,\n    -66,\n    -65,\n    84,\n    15,\n    26,\n    -32,\n    90,\n    -61,\n    90,\n    84,\n    29,\n    46,\n    -60,\n    29,\n    17,\n    56,\n    -38,\n    98,\n    57,\n    99,\n    49,\n    -63,\n    76,\n    -62,\n    54,\n    22,\n    -34,\n    -32,\n    5,\n    -61,\n    73,\n    86,\n    -30,\n    -64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    -6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    -63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    -60,\n    18,\n    82,\n    14,\n    -30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    -39,\n    4,\n    83,\n    -63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    -36,\n    -66,\n    4,\n    80,\n  ],\n  [\n    81,\n    -65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    -65,\n    -33,\n    -3,\n    18,\n    59,\n    83,\n    -64,\n    72,\n    23,\n    52,\n    -6,\n    21,\n    53,\n    17,\n    -61,\n    89,\n    57,\n    8,\n    -64,\n    93,\n    1,\n    71,\n    -65,\n    59,\n    91,\n    -37,\n    78,\n    -67,\n    13,\n    19,\n    12,\n    1,\n    -39,\n    20,\n    -32,\n    -32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    -6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    -37,\n    -3,\n    5,\n    -65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    -65,\n    -33,\n    1,\n    -38,\n    41,\n    -39,\n    -3,\n    0,\n    48,\n    -60,\n    99,\n    -66,\n    52,\n  ],\n];\n\nexport const ChainMatrixSamples = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    39,\n    36,\n    73,\n    12,\n    92,\n    100,\n    64,\n    33,\n    86,\n    85,\n    1,\n    34,\n    91,\n    74,\n    37,\n    42,\n    57,\n    31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    67,\n    62,\n    28,\n    8,\n    86,\n    32,\n    65,\n    48,\n    60,\n    23,\n    2,\n    35,\n    67,\n    96,\n    5,\n    89,\n    12,\n    36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    39,\n    69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    38,\n    66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    32,\n    14,\n    32,\n    50,\n    51,\n    9,\n    43,\n    34,\n    4,\n    65,\n    86,\n    94,\n    28,\n    29,\n    35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    3,\n    53,\n    65,\n    3,\n    51,\n    52,\n    11,\n    19,\n    32,\n    46,\n    67,\n    35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    30,\n    69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    3,\n    75,\n    82,\n    19,\n    63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    3,\n    52,\n    62,\n    38,\n    21,\n    85,\n  ][\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    34,\n    0,\n    12,\n    35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    37,\n    93,\n    36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    67,\n    91,\n    24,\n    28,\n    67,\n    48,\n    30,\n    74,\n    90,\n    28,\n    73,\n    33,\n    59,\n    98,\n    96,\n    12,\n    69,\n    65,\n    37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91)\n  ],\n  [\n    58,\n    31,\n    8,\n    88,\n    0,\n    68,\n    91,\n    81,\n    34,\n    1,\n    11,\n    82,\n    39,\n    90,\n    33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    37,\n    88,\n    57,\n    32,\n    8,\n    39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    3,\n    43,\n    99,\n    0,\n    35,\n    93,\n    30,\n    30,\n    91,\n    66,\n    88,\n    32,\n    89,\n    94,\n    3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    31,\n    66,\n    30,\n    62,\n    13,\n    21,\n    69,\n    29,\n    86,\n    50,\n    89,\n    65,\n    92,\n    29,\n    64,\n    66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    68,\n    31,\n    93,\n  ],\n  [\n    66,\n    35,\n    68,\n    6,\n    0,\n    62,\n    75,\n    36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    31,\n    32,\n    63,\n    44,\n    56,\n    68,\n    86,\n    84,\n    60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    69,\n    6,\n    59,\n    4,\n    14,\n    70,\n    63,\n    10,\n    94,\n    92,\n    61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    61,\n    82,\n    70,\n    12,\n    8,\n    64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    60,\n  ],\n  [\n    45,\n    38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    6,\n    76,\n    20,\n    30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    32,\n    9,\n    30,\n    26,\n    50,\n    3,\n    50,\n    79,\n    31,\n    94,\n    40,\n    7,\n    49,\n    3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    69,\n    92,\n    89,\n    2,\n    86,\n    34,\n    28,\n    81,\n    95,\n    39,\n    21,\n    30,\n    98,\n    81,\n    38,\n    75,\n    61,\n    89,\n    2,\n    6,\n    79,\n    88,\n    62,\n    43,\n    62,\n    95,\n    47,\n    19,\n    1,\n    69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    61,\n    93,\n    61,\n    71,\n    17,\n    39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    60,\n    70,\n    42,\n    30,\n    71,\n    2,\n    48,\n    39,\n    96,\n    38,\n    2,\n    59,\n    69,\n    68,\n    62,\n    90,\n    2,\n    30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    67,\n    95,\n    47,\n    39,\n    16,\n    3,\n    39,\n    6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    62,\n    81,\n    4,\n    3,\n    80,\n    33,\n    79,\n    1,\n    71,\n    69,\n    40,\n    34,\n    3,\n    1,\n    7,\n    62,\n    46,\n    85,\n    43,\n    67,\n    50,\n    62,\n    57,\n    61,\n    94,\n    60,\n    73,\n    3,\n    15,\n    60,\n    83,\n    55,\n    38,\n    87,\n    61,\n    6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    65,\n    38,\n    99,\n    63,\n    13,\n    63,\n    76,\n    24,\n    66,\n    65,\n    84,\n    15,\n    26,\n    32,\n    90,\n    61,\n    90,\n    84,\n    29,\n    46,\n    60,\n    29,\n    17,\n    56,\n    38,\n    98,\n    57,\n    99,\n    49,\n    63,\n    76,\n    62,\n    54,\n    22,\n    34,\n    32,\n    5,\n    61,\n    73,\n    86,\n    30,\n    64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    60,\n    18,\n    82,\n    14,\n    30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    39,\n    4,\n    83,\n    63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    36,\n    66,\n    4,\n    80,\n  ],\n  [\n    81,\n    65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    65,\n    33,\n    3,\n    18,\n    59,\n    83,\n    64,\n    72,\n    23,\n    52,\n    6,\n    21,\n    53,\n    17,\n    61,\n    89,\n    57,\n    8,\n    64,\n    93,\n    1,\n    71,\n    65,\n    59,\n    91,\n    37,\n    78,\n    67,\n    13,\n    19,\n    12,\n    1,\n    39,\n    20,\n    32,\n    32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    37,\n    3,\n    5,\n    65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    65,\n    33,\n    1,\n    38,\n    41,\n    39,\n    3,\n    0,\n    48,\n    60,\n    99,\n    66,\n    52,\n  ],\n];\n"],"sourceRoot":""}