{"version":3,"sources":["Screens/Sets/LongestCommonSubsequence.js","Samples.js","../node_modules/react-bootstrap/esm/CardDeck.js","Algorithms/LongestCommonSubsequence.js"],"names":["LongestCommonSubsequence","useState","str1","setStr1","str2","setStr2","commonStr","setCommonStr","title","isOption","setSample","sampleNum","console","log","twoStringSample","longestCommonSubsequence","split","join","md","Group","controlId","Label","Control","defaultValue","id","onChange","firstSeq","document","getElementById","value","type","placeholder","Text","className","secondSeq","length","BalancedPartitionSample","longestIncreasingSequenceSample","createWithBsPrefix","set1","set2","lcsMatrix","Array","fill","map","columnIndex","rowIndex","Math","max","longestSequence","unshift"],"mappings":"qNAwFeA,UAhFkB,KAAO,MAAD,EACbC,mBAAS,IADI,mBAC9BC,EAD8B,KACxBC,EADwB,OAEbF,mBAAS,IAFI,mBAE9BG,EAF8B,KAExBC,EAFwB,OAGHJ,mBAAS,IAHN,mBAG9BK,EAH8B,KAGnBC,EAHmB,KA0BrC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,8BAAZ,8OAOJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMA,MAAM,QAAQC,UAAQ,EAACC,UAzBpBC,IACjBC,QAAQC,IAAIF,GACZR,EAAQW,IAAgBH,GAAW,IACnCN,EAAQS,IAAgBH,GAAW,IACnCJ,EACEQ,YACED,IAAgBH,GAAW,GAAGK,MAAM,IACpCF,IAAgBH,GAAW,GAAGK,MAAM,KACpCC,KAAK,OAkBC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAD,KACE,kBAAC,IAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAAC,IAAKC,MAAN,qBACA,kBAAC,IAAKC,QAAN,CACEC,aAAcrB,EACdsB,GAAG,OACHC,SA5CH,KACjB,IAAIC,EAAWC,SAASC,eAAe,QAAQC,MAC/C1B,EAAQuB,GACRnB,EAAaQ,YAAyBW,EAASV,MAAM,IAAKZ,EAAKY,MAAM,KAAKC,KAAK,MA0C3Da,KAAK,OACLC,YAAY,iBAEd,kBAAC,IAAKC,KAAN,CAAWC,UAAU,cAArB,8BAEF,kBAAC,IAAKd,MAAN,CAAYC,UAAU,gCACpB,kBAAC,IAAKC,MAAN,sBACA,kBAAC,IAAKC,QAAN,CACEC,aAAcnB,EACdoB,GAAG,OACHC,SAlDH,KACjB,IAAIS,EAAYP,SAASC,eAAe,QAAQC,MAChDxB,EAAQ6B,GACR3B,EAAaQ,YAAyBb,EAAKc,MAAM,IAAKkB,EAAUlB,MAAM,KAAKC,KAAK,MAgD5Da,KAAK,OACLC,YAAY,iBAEd,kBAAC,IAAKC,KAAN,CAAWC,UAAU,cAArB,mCAMV,kBAAC,IAAD,CAAMzB,MAAM,UACV,uBAAGyB,UAAU,QAAQ3B,EAAU6B,OAAS,EAAI,MAAQ7B,U,gCC/ElE,sGAAO,MAAM8B,EAA0B,CACrC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAICtB,EAAkB,CAC7B,CACE,wFACA,mGAEF,CACE,qGACA,gGAEF,CACE,wFACA,4FAEF,CACE,uFACA,iGAEF,CACE,mGACA,qGAEF,CACE,gGACA,sGAEF,CACE,yGACA,4GAEF,CACE,iGACA,qHAEF,CACE,8HACA,sHAEF,CACE,mHACA,6HAISuB,EAAkC,CAC7C,CACE,IACC,GACD,EACA,GACA,GACA,GACA,GACC,IACA,GACD,GACA,GACA,GACA,KACC,IACA,GACD,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACA,EACA,IACC,IACA,GACD,IACC,GACD,GACA,GACC,IACA,GACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,EACD,GACA,GACA,GACA,IACC,GACD,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,GACD,GACA,IAEF,CA0FE,IAEF,CACE,IACC,GACD,EACA,GACA,GACC,GACD,GACA,IACC,GACD,EACA,GACA,IACC,GACD,IACC,GACD,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACC,GACD,IACC,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,EACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,IACA,GACD,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,EACG,IACA,IACA,IACA,EACD,GACC,GACD,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,GACD,GACA,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACC,IACA,EACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IAEH,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,GACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACC,GACD,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACC,EACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACA,EACA,IACC,GACD,IACC,GACD,EACA,IACC,IACA,IACA,GACD,GACA,GACC,GACD,IAEF,CACE,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,IACC,GACD,IACC,GACA,IACA,EACD,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACC,EACD,IACC,GACD,GACA,EACA,IACC,GACD,IACC,IACA,EACD,EACA,GACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,IACC,GACD,IACC,GACD,IACC,EACD,IACC,GACD,GACA,IACC,GACD,IACC,IACA,EACD,GACA,EACA,GACA,IAEF,EACG,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,EACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,EACA,IAEF,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,IACA,EACD,GACA,GACA,IACC,GACD,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACC,GACD,GACA,EACA,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,IACC,IACA,GACD,EACA,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,EACD,GACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACC,GACD,IACC,IACA,EACD,EACA,IACC,GACD,IACC,GACD,M,gCCj7BJ,YACeC,gBAAmB,c,gCCInB,SAASvB,EAAyBwB,EAAMC,GAErD,MAAMC,EAAYC,MAAMF,EAAKL,OAAS,GACnCQ,KAAK,MACLC,IAAI,IAAMF,MAAMH,EAAKJ,OAAS,GAAGQ,KAAK,OAGzC,IAAK,IAAIE,EAAc,EAAGA,GAAeN,EAAKJ,OAAQU,GAAe,EACnEJ,EAAU,GAAGI,GAAe,EAI9B,IAAK,IAAIC,EAAW,EAAGA,GAAYN,EAAKL,OAAQW,GAAY,EAC1DL,EAAUK,GAAU,GAAK,EAI3B,IAAK,IAAIA,EAAW,EAAGA,GAAYN,EAAKL,OAAQW,GAAY,EAC1D,IAAK,IAAID,EAAc,EAAGA,GAAeN,EAAKJ,OAAQU,GAAe,EAC/DN,EAAKM,EAAc,KAAOL,EAAKM,EAAW,GAC5CL,EAAUK,GAAUD,GAAeJ,EAAUK,EAAW,GAAGD,EAAc,GAAK,EAE9EJ,EAAUK,GAAUD,GAAeE,KAAKC,IACtCP,EAAUK,EAAW,GAAGD,GACxBJ,EAAUK,GAAUD,EAAc,IAO1C,IAAKJ,EAAUD,EAAKL,QAAQI,EAAKJ,QAE/B,MAAO,CAAC,IAGV,MAAMc,EAAkB,GACxB,IAAIJ,EAAcN,EAAKJ,OACnBW,EAAWN,EAAKL,OAEpB,KAAOU,EAAc,GAAKC,EAAW,GAC/BP,EAAKM,EAAc,KAAOL,EAAKM,EAAW,IAE5CG,EAAgBC,QAAQX,EAAKM,EAAc,IAC3CA,GAAe,EACfC,GAAY,GACHL,EAAUK,GAAUD,KAAiBJ,EAAUK,GAAUD,EAAc,GAEhFA,GAAe,EAGfC,GAAY,EAIhB,OAAOG,EA5DT","file":"static/js/14.1c51e802.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport longestCommonSubsequence from \"../../Algorithms/LongestCommonSubsequence\";\nimport { twoStringSample } from \"../../Samples\";\n\nconst LongestCommonSubsequence = () => {\n  const [str1, setStr1] = useState(\"\");\n  const [str2, setStr2] = useState(\"\");\n  const [commonStr, setCommonStr] = useState(\"\");\n\n  const updateStr1 = () => {\n    let firstSeq = document.getElementById(\"str1\").value;\n    setStr1(firstSeq);\n    setCommonStr(longestCommonSubsequence(firstSeq.split(\"\"), str2.split(\"\")).join(\"\"));\n  };\n  const updateStr2 = () => {\n    let secondSeq = document.getElementById(\"str2\").value;\n    setStr2(secondSeq);\n    setCommonStr(longestCommonSubsequence(str1.split(\"\"), secondSeq.split(\"\")).join(\"\"));\n  };\n  const setSample = (sampleNum) => {\n    console.log(sampleNum);\n    setStr1(twoStringSample[sampleNum][0]);\n    setStr2(twoStringSample[sampleNum][1]);\n    setCommonStr(\n      longestCommonSubsequence(\n        twoStringSample[sampleNum][0].split(\"\"),\n        twoStringSample[sampleNum][1].split(\"\")\n      ).join(\"\")\n    );\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Longest Common Subsequence\">\n            Longest Common Subsequence Problem has two sequences and we have to find the length of\n            longest subsequence present in both of them. A subsequence is a sequence that appears in\n            the same relative order, but not necessarily contiguous.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\" isOption setSample={setSample}>\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>First String</Form.Label>\n                      <Form.Control\n                        defaultValue={str1}\n                        id=\"str1\"\n                        onChange={updateStr1}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input First String</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                      <Form.Label>Second String</Form.Label>\n                      <Form.Control\n                        defaultValue={str2}\n                        id=\"str2\"\n                        onChange={updateStr2}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Second String</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">\n              <p className=\"ml-3\">{commonStr.length < 1 ? \"---\" : commonStr}</p>\n            </Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LongestCommonSubsequence;\n","export const BalancedPartitionSample = [\n  [1, 2, 3], // valid\n  [2, 3, 4], // not valid\n  [2, 3, 4], // not valid\n  [1, 2, 4, 1], // valid\n  [9, 2, 4, 5], // not valid\n  [9, 0, 4, 5], //valid\n  [1, 4, 2, 5], // not valid\n  [2, 5, 1, 2], // valid\n  [6, 2, 4, 1], // not valid\n  [5, 1, 8, 2], // valid\n];\n\n// Longest Common Subsequence, Shortest Common Supersequence\nexport const twoStringSample = [\n  [\n    \"AFAFAHHAHFADAFAFTAHHAHHAFAFFDAFAFHADDAAFAFFAFADAFAFAHHAHHADDAAFAFFAHDAADFARDHDAIADAAD\",\n    \"FATDAFAFAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDAAFAFFDAFARRRRFHADDAAFAFFAHDAADHADAAID\",\n  ],\n  [\n    \"FAAFADDAAFAFFAHDATTTADFADAFRRRRAFAHFAHHAHHAHAHIIIIIFADAFAFAHHAHHAAFAFFTTTTDAFAFHARRRRDDHDAADHADAAD\",\n    \"FAFAAHHADDAAFAFFAADFADAFADAFTRIAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHHADAADFAFAHHAHHADDTRIAAHDAAD\",\n  ],\n  [\n    \"FADAFAAFFAHTTTTTFADAFAFAHHAHFAIIIIIIIAAFAHHRIRIRIDDAAFFAFFDAFAFHADDTITIFFAHDAADHADAAD\",\n    \"FADAFAFAHHATADAFAFFAHDAADFADAFATITIHHAHHADDFADAFAFAHRIRIRIFAFFDAFAFHTRIAAFAFFAHDAADAAAAD\",\n  ],\n  [\n    \"FAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDFAFFDAFAFHADDAADAFAFAHHAHHADDAFAFFAHDHADAAD\",\n    \"FADAFAFAHHAHHADDAAFAFFAHAFADAFAFAHHAHHADDAAFAFFDAFAFHADDAAFAFFAHDAADADFADAFAFAHHAHHADDFAHDAAD\",\n  ],\n  [\n    \"FADAFAFAHHARITIRITIFITIRFTIRFRIRFAHHARITIFARIFFFAHDAADFHHADDAAFAFFDAFAFHRIRITIAAFAFFAHDAADHADAAD\",\n    \"FADAFFADAFAFAHHAHFAITIAIFTRHDTTFAFAHHRITITIHADAADAFAHHAHHADDAITITRITIRDFADAFAFAHHAHHADDAAFAFFAHDA\",\n  ],\n  [\n    \"FADAFAADDAAFAFFAHDAADFADAFAAITIAIFTRFAFAHHAHHADDAAFAFFFAHHAHHDAITIAIFTRFADDAAFAFFAHDAADHADAAD\",\n    \"FHAHHADDAAFAFFAHDAADAAITIAIFTRHHAFADAFAFAHAITIRIITIFATIAHHADDAAFAFFAHDAADFADAFAFAHHAHHAAITIAIFTRAD\",\n  ],\n  [\n    \"FAAITIAIFTRADAFAFAHHAHFADAFAFAAITIAIFTRAHHAFAFAHHAHHADDAAFAFFAHDAADFADDAAFAFFDAFAFHADFAFFAHDAADHRTIRFD\",\n    \"FADATIRITIRFITIRFATIFTAFAHHAHHADDAAFAFFAFADAFAFAHHAHHADDAAFAITIAIFTRFFAHDAADFADAFAFAHHAHHADAADADFAHHAAFA\",\n  ],\n  [\n    \"FADAFTRIFTIFFAHDAADFADAFAFHAHFADAFTFIRITIAFAHHAHHADFAHHAHHADDAAFAFFDAFAFHADDAAFARTIRFAADHADAAD\",\n    \"FAHHAHHADDAAFAFFAHDAADFADAFATRIFITIFHFADAFAFAHHAHHADDAAFATRITIFIFAHDAADFADAFAFAHTRITIFIAADHADDAAFAFTRIRITIFAHDAAD\",\n  ],\n  [\n    \"FAADFADAFAFAHHTAHRFIIRITFARDAFATFAHHAIHTHAIDDAFIRRITADAIFAFAHHTAHHAIDDAARFAFFAIFIRITHYDAFRAFFDHADDAFIRITAFAFFAHDAADHAIDATAD\",\n    \"FADAFAFAHFIRITHAHHADDAAFAFFDAFFIRITAFHADDAAFAFFFIRITFADAFAFAHFIRITHAHHADDAAFATTFFDAFIAIFHRIADDAAFATIFFAHDAADAHDAAD\",\n  ],\n  [\n    \"HHFIRITAHHADDAAFAFFAHFIRITDAADFADFADRAFAFAIAFAFATHHAHIFADARFAFAHHTAHHIADDAATFAFFRDAFIAFHADIDIFFATHDTAARDIHADRAAD\",\n    \"FADAFHHAHHAFIRITDDAAFAFFAHDAAFIRITDIFFAFRAHHTAHHADIDAAFRAFFAFIADAFTAFAHHTAHHADDAAFAFIFAHDARADFIADAFRAFAHHIAHTHADAADHDAAD\",\n  ],\n];\n\nexport const longestIncreasingSequenceSample = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    -39,\n    -36,\n    73,\n    12,\n    92,\n    100,\n    -64,\n    -33,\n    86,\n    85,\n    1,\n    -34,\n    91,\n    74,\n    -37,\n    42,\n    57,\n    -31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    -67,\n    -62,\n    28,\n    8,\n    86,\n    -32,\n    -65,\n    48,\n    -60,\n    23,\n    2,\n    -35,\n    -67,\n    96,\n    5,\n    89,\n    12,\n    -36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    -39,\n    -69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    -38,\n    -66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    -32,\n    14,\n    -32,\n    50,\n    51,\n    9,\n    43,\n    -34,\n    4,\n    -65,\n    86,\n    94,\n    28,\n    29,\n    -35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    -3,\n    53,\n    -65,\n    -3,\n    51,\n    52,\n    11,\n    19,\n    -32,\n    46,\n    -67,\n    -35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    -30,\n    -69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    -3,\n    75,\n    82,\n    19,\n    -63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    -38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    -3,\n    52,\n    -62,\n    -38,\n    21,\n    85,\n  ],\n  [\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    -30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    -34,\n    0,\n    12,\n    -35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    -37,\n    93,\n    -36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    -33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    -67,\n    91,\n    24,\n    28,\n    -67,\n    48,\n    -30,\n    74,\n    90,\n    28,\n    73,\n    -33,\n    59,\n    98,\n    96,\n    12,\n    -69,\n    -65,\n    -37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    -65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91),\n  ],\n  [\n    58,\n    -31,\n    8,\n    88,\n    0,\n    -68,\n    91,\n    81,\n    -34,\n    1,\n    11,\n    82,\n    -39,\n    90,\n    -33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    -37,\n    88,\n    57,\n    -32,\n    8,\n    -39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    -3,\n    43,\n    99,\n    0,\n    -35,\n    93,\n    -30,\n    -30,\n    91,\n    -66,\n    88,\n    -32,\n    89,\n    94,\n    -3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    -31,\n    -66,\n    -30,\n    -62,\n    13,\n    21,\n    -69,\n    29,\n    86,\n    50,\n    89,\n    -65,\n    92,\n    29,\n    -64,\n    -66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    -68,\n    -31,\n    93,\n  ],\n  [\n    -66,\n    -35,\n    -68,\n    -6,\n    0,\n    -62,\n    75,\n    -36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    -32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    -3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    -31,\n    -32,\n    -63,\n    44,\n    56,\n    -68,\n    86,\n    84,\n    -60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    -69,\n    -6,\n    59,\n    4,\n    14,\n    70,\n    -63,\n    10,\n    94,\n    92,\n    -61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    -61,\n    82,\n    70,\n    12,\n    8,\n    -64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    -68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    -60,\n  ],\n  [\n    45,\n    -38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    -63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    -35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    -6,\n    76,\n    20,\n    -30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    -69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    -39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    -32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    -38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    -32,\n    9,\n    -30,\n    26,\n    50,\n    -3,\n    50,\n    79,\n    -31,\n    94,\n    40,\n    7,\n    49,\n    -3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    -67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    -69,\n    92,\n    89,\n    2,\n    86,\n    -34,\n    28,\n    81,\n    95,\n    -39,\n    21,\n    -30,\n    98,\n    81,\n    -38,\n    75,\n    -61,\n    89,\n    2,\n    -6,\n    79,\n    88,\n    -62,\n    43,\n    -62,\n    95,\n    47,\n    19,\n    1,\n    -69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    -61,\n    93,\n    -61,\n    71,\n    17,\n    -39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    -68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    -60,\n    70,\n    42,\n    -30,\n    71,\n    2,\n    48,\n    -39,\n    96,\n    -38,\n    2,\n    59,\n    -69,\n    -68,\n    -62,\n    90,\n    2,\n    -30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    -69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    -67,\n    95,\n    47,\n    -39,\n    16,\n    -3,\n    -39,\n    -6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    -61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    -64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    -62,\n    81,\n    4,\n    -3,\n    80,\n    -33,\n    79,\n    1,\n    71,\n    -69,\n    40,\n    -34,\n    -3,\n    1,\n    7,\n    -62,\n    46,\n    85,\n    43,\n    -67,\n    50,\n    -62,\n    57,\n    -61,\n    94,\n    -60,\n    73,\n    -3,\n    15,\n    -60,\n    83,\n    55,\n    -38,\n    87,\n    -61,\n    -6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    -65,\n    -38,\n    99,\n    -63,\n    13,\n    -63,\n    76,\n    24,\n    -66,\n    -65,\n    84,\n    15,\n    26,\n    -32,\n    90,\n    -61,\n    90,\n    84,\n    29,\n    46,\n    -60,\n    29,\n    17,\n    56,\n    -38,\n    98,\n    57,\n    99,\n    49,\n    -63,\n    76,\n    -62,\n    54,\n    22,\n    -34,\n    -32,\n    5,\n    -61,\n    73,\n    86,\n    -30,\n    -64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    -6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    -63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    -60,\n    18,\n    82,\n    14,\n    -30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    -39,\n    4,\n    83,\n    -63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    -36,\n    -66,\n    4,\n    80,\n  ],\n  [\n    81,\n    -65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    -65,\n    -33,\n    -3,\n    18,\n    59,\n    83,\n    -64,\n    72,\n    23,\n    52,\n    -6,\n    21,\n    53,\n    17,\n    -61,\n    89,\n    57,\n    8,\n    -64,\n    93,\n    1,\n    71,\n    -65,\n    59,\n    91,\n    -37,\n    78,\n    -67,\n    13,\n    19,\n    12,\n    1,\n    -39,\n    20,\n    -32,\n    -32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    -6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    -37,\n    -3,\n    5,\n    -65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    -65,\n    -33,\n    1,\n    -38,\n    41,\n    -39,\n    -3,\n    0,\n    48,\n    -60,\n    99,\n    -66,\n    52,\n  ],\n];\n\nexport const ChainMatrixSamples = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    39,\n    36,\n    73,\n    12,\n    92,\n    100,\n    64,\n    33,\n    86,\n    85,\n    1,\n    34,\n    91,\n    74,\n    37,\n    42,\n    57,\n    31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    67,\n    62,\n    28,\n    8,\n    86,\n    32,\n    65,\n    48,\n    60,\n    23,\n    2,\n    35,\n    67,\n    96,\n    5,\n    89,\n    12,\n    36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    39,\n    69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    38,\n    66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    32,\n    14,\n    32,\n    50,\n    51,\n    9,\n    43,\n    34,\n    4,\n    65,\n    86,\n    94,\n    28,\n    29,\n    35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    3,\n    53,\n    65,\n    3,\n    51,\n    52,\n    11,\n    19,\n    32,\n    46,\n    67,\n    35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    30,\n    69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    3,\n    75,\n    82,\n    19,\n    63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    3,\n    52,\n    62,\n    38,\n    21,\n    85,\n  ][\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    34,\n    0,\n    12,\n    35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    37,\n    93,\n    36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    67,\n    91,\n    24,\n    28,\n    67,\n    48,\n    30,\n    74,\n    90,\n    28,\n    73,\n    33,\n    59,\n    98,\n    96,\n    12,\n    69,\n    65,\n    37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91)\n  ],\n  [\n    58,\n    31,\n    8,\n    88,\n    0,\n    68,\n    91,\n    81,\n    34,\n    1,\n    11,\n    82,\n    39,\n    90,\n    33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    37,\n    88,\n    57,\n    32,\n    8,\n    39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    3,\n    43,\n    99,\n    0,\n    35,\n    93,\n    30,\n    30,\n    91,\n    66,\n    88,\n    32,\n    89,\n    94,\n    3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    31,\n    66,\n    30,\n    62,\n    13,\n    21,\n    69,\n    29,\n    86,\n    50,\n    89,\n    65,\n    92,\n    29,\n    64,\n    66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    68,\n    31,\n    93,\n  ],\n  [\n    66,\n    35,\n    68,\n    6,\n    0,\n    62,\n    75,\n    36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    31,\n    32,\n    63,\n    44,\n    56,\n    68,\n    86,\n    84,\n    60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    69,\n    6,\n    59,\n    4,\n    14,\n    70,\n    63,\n    10,\n    94,\n    92,\n    61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    61,\n    82,\n    70,\n    12,\n    8,\n    64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    60,\n  ],\n  [\n    45,\n    38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    6,\n    76,\n    20,\n    30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    32,\n    9,\n    30,\n    26,\n    50,\n    3,\n    50,\n    79,\n    31,\n    94,\n    40,\n    7,\n    49,\n    3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    69,\n    92,\n    89,\n    2,\n    86,\n    34,\n    28,\n    81,\n    95,\n    39,\n    21,\n    30,\n    98,\n    81,\n    38,\n    75,\n    61,\n    89,\n    2,\n    6,\n    79,\n    88,\n    62,\n    43,\n    62,\n    95,\n    47,\n    19,\n    1,\n    69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    61,\n    93,\n    61,\n    71,\n    17,\n    39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    60,\n    70,\n    42,\n    30,\n    71,\n    2,\n    48,\n    39,\n    96,\n    38,\n    2,\n    59,\n    69,\n    68,\n    62,\n    90,\n    2,\n    30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    67,\n    95,\n    47,\n    39,\n    16,\n    3,\n    39,\n    6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    62,\n    81,\n    4,\n    3,\n    80,\n    33,\n    79,\n    1,\n    71,\n    69,\n    40,\n    34,\n    3,\n    1,\n    7,\n    62,\n    46,\n    85,\n    43,\n    67,\n    50,\n    62,\n    57,\n    61,\n    94,\n    60,\n    73,\n    3,\n    15,\n    60,\n    83,\n    55,\n    38,\n    87,\n    61,\n    6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    65,\n    38,\n    99,\n    63,\n    13,\n    63,\n    76,\n    24,\n    66,\n    65,\n    84,\n    15,\n    26,\n    32,\n    90,\n    61,\n    90,\n    84,\n    29,\n    46,\n    60,\n    29,\n    17,\n    56,\n    38,\n    98,\n    57,\n    99,\n    49,\n    63,\n    76,\n    62,\n    54,\n    22,\n    34,\n    32,\n    5,\n    61,\n    73,\n    86,\n    30,\n    64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    60,\n    18,\n    82,\n    14,\n    30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    39,\n    4,\n    83,\n    63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    36,\n    66,\n    4,\n    80,\n  ],\n  [\n    81,\n    65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    65,\n    33,\n    3,\n    18,\n    59,\n    83,\n    64,\n    72,\n    23,\n    52,\n    6,\n    21,\n    53,\n    17,\n    61,\n    89,\n    57,\n    8,\n    64,\n    93,\n    1,\n    71,\n    65,\n    59,\n    91,\n    37,\n    78,\n    67,\n    13,\n    19,\n    12,\n    1,\n    39,\n    20,\n    32,\n    32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    37,\n    3,\n    5,\n    65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    65,\n    33,\n    1,\n    38,\n    41,\n    39,\n    3,\n    0,\n    48,\n    60,\n    99,\n    66,\n    52,\n  ],\n];\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');","/**\n * @param {string[]} set1\n * @param {string[]} set2\n * @return {string[]}\n */\nexport default function longestCommonSubsequence(set1, set2) {\n  // Init LCS matrix.\n  const lcsMatrix = Array(set2.length + 1)\n    .fill(null)\n    .map(() => Array(set1.length + 1).fill(null));\n\n  // Fill first row with zeros.\n  for (let columnIndex = 0; columnIndex <= set1.length; columnIndex += 1) {\n    lcsMatrix[0][columnIndex] = 0;\n  }\n\n  // Fill first column with zeros.\n  for (let rowIndex = 0; rowIndex <= set2.length; rowIndex += 1) {\n    lcsMatrix[rowIndex][0] = 0;\n  }\n\n  // Fill rest of the column that correspond to each of two strings.\n  for (let rowIndex = 1; rowIndex <= set2.length; rowIndex += 1) {\n    for (let columnIndex = 1; columnIndex <= set1.length; columnIndex += 1) {\n      if (set1[columnIndex - 1] === set2[rowIndex - 1]) {\n        lcsMatrix[rowIndex][columnIndex] = lcsMatrix[rowIndex - 1][columnIndex - 1] + 1;\n      } else {\n        lcsMatrix[rowIndex][columnIndex] = Math.max(\n          lcsMatrix[rowIndex - 1][columnIndex],\n          lcsMatrix[rowIndex][columnIndex - 1]\n        );\n      }\n    }\n  }\n\n  // Calculate LCS based on LCS matrix.\n  if (!lcsMatrix[set2.length][set1.length]) {\n    // If the length of largest common string is zero then return empty string.\n    return [\"\"];\n  }\n\n  const longestSequence = [];\n  let columnIndex = set1.length;\n  let rowIndex = set2.length;\n\n  while (columnIndex > 0 || rowIndex > 0) {\n    if (set1[columnIndex - 1] === set2[rowIndex - 1]) {\n      // Move by diagonal left-top.\n      longestSequence.unshift(set1[columnIndex - 1]);\n      columnIndex -= 1;\n      rowIndex -= 1;\n    } else if (lcsMatrix[rowIndex][columnIndex] === lcsMatrix[rowIndex][columnIndex - 1]) {\n      // Move left.\n      columnIndex -= 1;\n    } else {\n      // Move up.\n      rowIndex -= 1;\n    }\n  }\n\n  return longestSequence;\n}\n"],"sourceRoot":""}