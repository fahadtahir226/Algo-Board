{"version":3,"sources":["Algorithms/Knapsack.js","Screens/Sets/Knapsack.js","App/components/MainCard.js"],"names":["knapsack","bucketSize","weights","profits","n","K","Array","fill","i","w","Math","max","console","log","Knapsack","useEffect","Row","Col","title","samples","MainCard","Component","state","isOption","this","props","implementSample","sampleNum","setSample","render","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","className","alignRight","Toggle","id","Menu","as","map","sample","key","Item","onClick","href","DEMO","BLANK_LINK","Header","Title","fullCard","position","top","left","right","width","windowWidth","height","windowHeight","loadCard","cardRemove","join","style","in","collapseCard","Body","children","windowSize"],"mappings":"4KAyBeA,MAfE,CAACC,EAAYC,EAASC,EAASC,KAC9C,IAAIC,EAAIC,MAAMF,EAAI,GAAGG,KAAKD,MAAML,EAAa,GAAGM,KAAK,IAErD,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAGI,IACtB,IAAK,IAAIC,EAAI,EAAGA,GAAKR,EAAYQ,IACtB,GAALD,GAAe,GAALC,EAAQJ,EAAEG,GAAGC,GAAK,EACvBP,EAAQM,EAAI,IAAMC,EACzBJ,EAAEG,GAAGC,GAAKC,KAAKC,IAAIR,EAAQK,EAAI,GAAKH,EAAEG,EAAI,GAAGC,EAAIP,EAAQM,EAAI,IAAKH,EAAEG,EAAI,GAAGC,IACxEJ,EAAEG,GAAGC,GAAKJ,EAAEG,EAAI,GAAGC,GAI5B,OADAG,QAAQC,IAAIR,GACLA,EAAED,GAAGH,ICQCa,UAvBE,KACfC,oBAAU,KACRH,QAAQC,IAAIb,EAAS,EAAG,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,IAAK,KAChD,IAED,kBAAC,IAAD,KACE,kBAACgB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,YAAZ,giBAO0B,U,gCCtBpC,8EAOA,MAAMC,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC5C,MAAMC,UAAiBC,YAAW,eAAD,oBAC/BC,MAAQ,CACNC,SAAUC,KAAKC,MAAMF,UAFQ,KAI/BG,gBAAmBC,IACjBH,KAAKC,MAAMG,UAAUD,IAEvBE,SACE,IAAIC,EAAiBC,EAAQC,EAAiBC,EAC1CC,EAAO,GACPC,EAAY,GAkHhB,OAhHIX,KAAKF,MAAMC,WACbS,EACE,yBAAKI,UAAU,qBACb,kBAAC,IAAD,CAAUC,YAAY,EAAMD,UAAU,yBACpC,kBAAC,IAASE,OAAV,CAAiBC,GAAG,iBAAiBH,UAAU,YAC7C,uBAAGA,UAAU,kCAEf,kBAAC,IAASI,KAAV,CAAeC,GAAG,KAAKL,UAAU,6BAC9BjB,EAAQuB,IAAI,CAACC,EAAQC,IACpB,kBAAC,IAASC,KAAV,CACED,IAAKA,EACLH,GAAG,KACHL,UAAU,gBACVU,QAAS,IAAMtB,KAAKE,gBAAgBkB,IAEpC,uBAAGR,UAAU,yBACb,uBAAGW,KAAMC,IAAKC,YAAd,gBAAwCN,EAAxC,WAgDdV,EACE,kBAAC,IAAKiB,OAAN,KACE,kBAAC,IAAKC,MAAN,CAAYV,GAAG,MAAMjB,KAAKC,MAAMP,OAC/Bc,GAIDR,KAAKF,MAAM8B,WACbjB,EAAY,IAAIA,EAAW,aAC3BL,EAAkB,CAChBuB,SAAU,QACVC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,MAAOjC,KAAKC,MAAMiC,YAClBC,OAAQnC,KAAKC,MAAMmC,eAInBpC,KAAKF,MAAMuC,WACb1B,EAAY,IAAIA,EAAW,aAC3BJ,EACE,yBAAKK,UAAU,eACb,uBAAGA,UAAU,8BAKfZ,KAAKF,MAAMwC,aACb3B,EAAY,IAAIA,EAAW,WAGzBX,KAAKC,MAAMU,YACbA,EAAY,IAAIA,EAAWX,KAAKC,MAAMU,YAGxCD,EACE,kBAAC,IAAD,CAAME,UAAWD,EAAU4B,KAAK,KAAMC,MAAOlC,GAC1CG,EACD,kBAAC,IAAD,CAAUgC,IAAKzC,KAAKF,MAAM4C,cACxB,6BACE,kBAAC,IAAKC,KAAN,KAAY3C,KAAKC,MAAM2C,YAG1BrC,GAIE,kBAAC,IAAD,KAAMG,IAIFmC,QAAWjD","file":"static/js/24.48565a10.chunk.js","sourcesContent":["/**\n * Dynamic programming approach to find Knapsack.\n * Time Complexity: O(N*W).\n *\n * @param {number[]} bucketSize\n * @param {number[]} weights\n * @param {number[]} profits\n * @param {number} n\n * @return {number}\n */\nconst knapsack = (bucketSize, weights, profits, n) => {\n  let K = Array(n + 1).fill(Array(bucketSize + 1).fill(0));\n  // Build table K[][] in bottom up manner\n  for (let i = 0; i <= n; i++) {\n    for (let w = 0; w <= bucketSize; w++) {\n      if (i == 0 || w == 0) K[i][w] = 0;\n      else if (weights[i - 1] <= w)\n        K[i][w] = Math.max(profits[i - 1] + K[i - 1][w - weights[i - 1]], K[i - 1][w]);\n      else K[i][w] = K[i - 1][w];\n    }\n  }\n  console.log(K);\n  return K[n][bucketSize];\n};\n\nexport default knapsack;\n","import React, { useEffect } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport knapsack from \"../../Algorithms/Knapsack\";\n\nconst Knapsack = () => {\n  useEffect(() => {\n    console.log(knapsack(2, [1, 1, 1], [10, 20, 30], 3));\n  }, []);\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Knapsack\">\n            Given weights and values of n items, put these items in a knapsack of capacity W to get\n            the maximum total value in the knapsack. In other words, given two integer arrays\n            val[0..n-1] and wt[0..n-1] which represent values and weights associated with n items\n            respectively. Also given an integer W which represents knapsack capacity, find out the\n            maximum value subset of val[] such that sum of the weights of this subset is smaller\n            than or equal to W. You cannot break an item, either pick the complete item or donâ€™t\n            pick it (0-1 property).{\" \"}\n          </Card>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default Knapsack;\n","import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nconst samples = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n  };\r\n  implementSample = (sampleNum) => {\r\n    this.props.setSample(sampleNum);\r\n  };\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              {samples.map((sample, key) => (\r\n                <Dropdown.Item\r\n                  key={key}\r\n                  as=\"li\"\r\n                  className=\"dropdown-item\"\r\n                  onClick={() => this.implementSample(key)}\r\n                >\r\n                  <i className=\"feather icon-sliders\" />\r\n                  <a href={DEMO.BLANK_LINK}> Test Sample {sample} </a>\r\n                </Dropdown.Item>\r\n              ))}\r\n              {/* <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard ? \"feather icon-minimize\" : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? \"Restore\" : \"Maximize\"} </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={this.state.collapseCard ? \"feather icon-plus\" : \"feather icon-minus\"}\r\n                />\r\n                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? \"Expand\" : \"Collapse\"} </a>\r\n              </Dropdown.Item>\r\n\r\n              <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item> */}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body>{this.props.children}</Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n"],"sourceRoot":""}