{"version":3,"sources":["Screens/Maths/ChainMatrixMultiplication.js","Algorithms/ChainMatrixMultiplication.js"],"names":["ChainMatrixMultiplication","useState","chainOrder","useEffect","console","log","matrixArray","n","i","j","k","L","q","m","Array","fill","Number","POSITIVE_INFINITY","matrixChainOrder","Row","Col","title","md","isOption","setSample","sampleNum","Form","Group","Label","Control","id","onChange","as","placeholder","rows","Text","className"],"mappings":"6LAmEeA,UA5DmB,KAAO,MAAD,EACFC,mBAAS,GADP,mBAC/BC,EAD+B,UAGtCC,oBAAU,KACRC,QAAQC,ICFG,SAA0BC,EAAaC,GAKpD,IAEIC,EAAGC,EAAGC,EAAGC,EAAGC,EAFZC,EAAIC,MAAMP,GAAGQ,KAAKD,MAAMP,GAAGQ,KAAK,IAUpC,IAAKJ,EAAI,EAAGA,EAAIJ,EAAGI,IACjB,IAAKH,EAAI,EAAGA,EAAID,EAAII,EAAI,EAAGH,IAGzB,IAFAC,EAAID,EAAIG,EAAI,EACZE,EAAEL,GAAGC,GAAKO,OAAOC,kBACZP,EAAIF,EAAGE,GAAKD,EAAI,EAAGC,IAEtBE,EAAIC,EAAEL,GAAGE,GAAKG,EAAEH,EAAI,GAAGD,GAAKH,EAAYE,EAAI,GAAKF,EAAYI,GAAKJ,EAAYG,GAC1EG,EAAIC,EAAEL,GAAGC,KAAII,EAAEL,GAAGC,GAAKG,GAKjC,OADAR,QAAQC,IAAIQ,GACLA,EAAE,GAAGN,EAAI,GDzBFW,CAAiB,CAAC,EAAG,EAAG,EAAG,GAAI,KAC1C,IAYH,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,+BAAZ,4FAKJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,GAAI,IACP,kBAAC,IAAD,CAAMD,MAAM,QAAQE,UAAQ,EAACC,UAdlBC,IACjBrB,QAAQC,IAAIoB,KAcJ,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,gBACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,8BACHC,SA7Bc,OA8BdC,GAAG,WACHC,YAAY,WACZC,KAAK,MAEP,kBAACR,EAAA,EAAKS,KAAN,CAAWC,UAAU,cAArB,0CAQd,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,UACV,uBAAGe,UAAU,QAAQlC","file":"static/js/32.a91415b5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport matrixChainOrder from \"../../Algorithms/ChainMatrixMultiplication\";\n\nconst ChainMatrixMultiplication = () => {\n  const [chainOrder, setChainOrder] = useState(0);\n\n  useEffect(() => {\n    console.log(matrixChainOrder([1, 2, 3, 4], 4));\n  }, []);\n\n  const updateChainMultiplication = () => {\n    // let data = document.getElementById(\"chain_matrix_multiplication\").value.split(\" \");\n    // data = data.map((item) => parseInt(item));\n    // if (isNaN(data[data.length - 1])) data.pop();\n    // setChainOrder(matrixChainOrder(data, 1));\n    // console.log(chainOrder);\n  };\n  const setSample = (sampleNum) => {\n    console.log(sampleNum);\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Matrix Chain Multiplication\">\n            The problem consists of finding the best way (order) of multiplying a set of matrices.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n          <Card title=\"Input\" isOption setSample={setSample}>\n            <Row>\n              <Col>\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Matrixs</Form.Label>\n                    <Form.Control\n                      id=\"chain_matrix_multiplication\"\n                      onChange={updateChainMultiplication}\n                      as=\"textarea\"\n                      placeholder=\"1 2 3...\"\n                      rows=\"3\"\n                    />\n                    <Form.Text className=\"text-muted\">Kindly Input Numbers with space</Form.Text>\n                  </Form.Group>\n                </Form>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card title=\"Output\">\n            <p className=\"ml-3\">{chainOrder}</p>\n          </Card>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default ChainMatrixMultiplication;\n","/**\n * Dynamic programming approach to find Chain Matrix Order.\n * Time Complexity: O(N*W).\n *\n * @param {number[]} matrixArray\n * @param {number} n\n * @return {number}\n */\n\nexport default function ChainMatrixOrder(matrixArray, n) {\n  /* For simplicity of the program, one \n    extra row and one extra column are \n    allocated in m[][]. 0th row and 0th \n    column of m[][] are not used */\n  let m = Array(n).fill(Array(n).fill(0));\n\n  let i, j, k, L, q;\n\n  /* m[i, j] = Minimum number of scalar \n    multiplications needed to compute the \n    matrix A[i]A[i+1]...A[j] = A[i..j] where \n    dimension of A[i] is p[i-1] x p[i] */\n\n  // L is chain length.\n  for (L = 2; L < n; L++) {\n    for (i = 1; i < n - L + 1; i++) {\n      j = i + L - 1;\n      m[i][j] = Number.POSITIVE_INFINITY;\n      for (k = i; k <= j - 1; k++) {\n        // q = cost/scalar multiplications\n        q = m[i][k] + m[k + 1][j] + matrixArray[i - 1] * matrixArray[k] * matrixArray[j];\n        if (q < m[i][j]) m[i][j] = q;\n      }\n    }\n  }\n  console.log(m);\n  return m[1][n - 1];\n}\n"],"sourceRoot":""}