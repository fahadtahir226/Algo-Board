{"version":3,"sources":["Algorithms/LevenshteinDistance.js","Screens/Strings/LevenshteinDistance.js","Samples.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["levenshteinDistance","a","b","distanceMatrix","Array","length","fill","map","i","j","indicator","Math","min","LevenshteinDistance","useState","str1","setStr1","str2","setStr2","dist","setDist","Row","Col","title","CardDeck","isOption","setSample","sampleNum","console","log","twoStringSample","md","Form","Group","controlId","Label","Control","defaultValue","id","onChange","firstSeq","document","getElementById","value","type","placeholder","Text","className","secondSeq","BalancedPartitionSample","longestIncreasingSequenceSample","createWithBsPrefix"],"mappings":"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GACA,GACA,IACC,IACA,GACD,GACA,EACA,IACC,IACA,GACD,IACC,GACD,GACA,GACC,IACA,GACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,EACD,GACA,GACA,GACA,IACC,GACD,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,EACD,IACC,IACA,GACD,GACA,IAEF,CA0FE,IAEF,CACE,IACC,GACD,EACA,GACA,GACC,GACD,GACA,IACC,GACD,EACA,GACA,IACC,GACD,IACC,GACD,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACC,GACD,IACC,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,EACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,IACA,GACD,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,IAEF,EACG,IACA,IACA,IACA,EACD,GACC,GACD,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,IACA,GACD,GACA,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACC,IACA,EACD,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IAEH,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,GACA,EACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACC,GACD,GACA,IACC,EACD,GACA,IACC,GACD,GACA,GACA,EACA,IACC,EACD,GACA,GACA,GACA,IAEF,CACE,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,IACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACC,EACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,GACA,GACA,GACA,GACA,EACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,GACD,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACC,GACD,GACA,IACC,GACD,GACA,EACA,IACC,GACD,IACC,GACD,EACA,IACC,IACA,IACA,GACD,GACA,GACC,GACD,IAEF,CACE,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,IACC,GACD,IACC,GACA,IACA,EACD,GACA,GACA,GACA,EACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACC,EACD,IACC,GACD,GACA,EACA,IACC,GACD,IACC,IACA,EACD,EACA,GACC,GACD,GACA,GACA,IACC,GACD,IACC,GACD,IACC,GACD,IACC,GACD,IACC,EACD,IACC,GACD,GACA,IACC,GACD,IACC,IACA,EACD,GACA,EACA,GACA,IAEF,EACG,IACA,GACD,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,IACC,GACD,IACC,GACD,GACA,IACC,IACA,GACD,GACC,GACD,GACA,IACC,IACA,GACD,GACA,GACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,GACD,GACA,GACA,EACA,GACA,IACC,GACD,GACA,GACA,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,IACC,GACD,EACA,IACC,GACD,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACC,IACA,GACD,EACA,IAEF,CACE,IACC,GACD,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,IACC,IACA,IACA,EACD,GACA,GACA,IACC,GACD,GACA,GACA,IACC,EACD,GACA,GACA,IACC,GACD,GACA,GACA,GACC,GACD,GACA,EACA,IACC,GACD,GACA,IACC,GACD,IACC,GACD,GACA,GACA,GACA,GACC,GACD,IACC,IACA,GACD,EACA,GACA,EACA,GACA,GACA,IACC,EACD,GACA,GACA,GACA,GACA,GACA,IACC,IACA,EACD,GACC,GACD,GACA,GACA,GACA,GACA,IACC,IACA,GACD,GACC,GACD,IACC,IACA,EACD,EACA,IACC,GACD,IACC,GACD,M,gCCj7BJ,YACeC,gBAAmB","file":"static/js/21.7ab8ae94.chunk.js","sourcesContent":["/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nexport default function levenshteinDistance(a, b) {\n  // Create empty edit distance matrix for all possible modifications of\n  // substrings of a to substrings of b.\n  const distanceMatrix = Array(b.length + 1)\n    .fill(null)\n    .map(() => Array(a.length + 1).fill(null));\n\n  // Fill the first row of the matrix.\n  // If this is first row then we're transforming empty string to a.\n  // In this case the number of transformations equals to size of a substring.\n  for (let i = 0; i <= a.length; i += 1) {\n    distanceMatrix[0][i] = i;\n  }\n\n  // Fill the first column of the matrix.\n  // If this is first column then we're transforming empty string to b.\n  // In this case the number of transformations equals to size of b substring.\n  for (let j = 0; j <= b.length; j += 1) {\n    distanceMatrix[j][0] = j;\n  }\n\n  for (let j = 1; j <= b.length; j += 1) {\n    for (let i = 1; i <= a.length; i += 1) {\n      const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n      distanceMatrix[j][i] = Math.min(\n        distanceMatrix[j][i - 1] + 1, // deletion\n        distanceMatrix[j - 1][i] + 1, // insertion\n        distanceMatrix[j - 1][i - 1] + indicator // substitution\n      );\n    }\n  }\n\n  return distanceMatrix[b.length][a.length];\n}\n","import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport levenshteinDistance from \"../../Algorithms/LevenshteinDistance\";\nimport { twoStringSample } from \"../../Samples\";\n\nconst LevenshteinDistance = () => {\n  const [str1, setStr1] = useState(\"\");\n  const [str2, setStr2] = useState(\"\");\n  const [dist, setDist] = useState(0);\n\n  const updateStr1 = () => {\n    let firstSeq = document.getElementById(\"str1\").value;\n    setStr1(firstSeq);\n    setDist(levenshteinDistance(firstSeq, str2));\n  };\n  const updateStr2 = () => {\n    let secondSeq = document.getElementById(\"str2\").value;\n    setStr2(secondSeq);\n    setDist(levenshteinDistance(str1, secondSeq));\n  };\n  const setSample = (sampleNum) => {\n    console.log(sampleNum);\n    setStr1(twoStringSample[sampleNum][0]);\n    setStr2(twoStringSample[sampleNum][1]);\n    setDist(levenshteinDistance(twoStringSample[sampleNum][0], twoStringSample[sampleNum][1]));\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Levenshtein Distance\">\n            The Levenshtein distance is a string metric for measuring difference between two\n            sequences. Informally, the Levenshtein distance between two words is the minimum number\n            of single-character edits (i.e. insertions, deletions or substitutions) required to\n            change one word into the other.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\" isOption setSample={setSample}>\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>First String</Form.Label>\n                      <Form.Control\n                        defaultValue={str1}\n                        id=\"str1\"\n                        onChange={updateStr1}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input First String</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                      <Form.Label>Second String</Form.Label>\n                      <Form.Control\n                        defaultValue={str2}\n                        id=\"str2\"\n                        onChange={updateStr2}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Second String</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">Levenshtein Distance: {dist}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LevenshteinDistance;\n","export const BalancedPartitionSample = [\n  [1, 2, 3], // valid\n  [2, 3, 4], // not valid\n  [2, 3, 4], // not valid\n  [1, 2, 4, 1], // valid\n  [9, 2, 4, 5], // not valid\n  [9, 0, 4, 5], //valid\n  [1, 4, 2, 5], // not valid\n  [2, 5, 1, 2], // valid\n  [6, 2, 4, 1], // not valid\n  [5, 1, 8, 2], // valid\n];\n\n// Longest Common Subsequence, Shortest Common Supersequence\nexport const twoStringSample = [\n  [\n    \"AFAFAHHAHFADAFAFTAHHAHHAFAFFDAFAFHADDAAFAFFAFADAFAFAHHAHHADDAAFAFFAHDAADFARDHDAIADAAD\",\n    \"FATDAFAFAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDAAFAFFDAFARRRRFHADDAAFAFFAHDAADHADAAID\",\n  ],\n  [\n    \"FAAFADDAAFAFFAHDATTTADFADAFRRRRAFAHFAHHAHHAHAHIIIIIFADAFAFAHHAHHAAFAFFTTTTDAFAFHARRRRDDHDAADHADAAD\",\n    \"FAFAAHHADDAAFAFFAADFADAFADAFTRIAHHAHHADDAAFAFFAHDAADFADAFAFAHHAHHADAADFAFAHHAHHADDTRIAAHDAAD\",\n  ],\n  [\n    \"FADAFAAFFAHTTTTTFADAFAFAHHAHFAIIIIIIIAAFAHHRIRIRIDDAAFFAFFDAFAFHADDTITIFFAHDAADHADAAD\",\n    \"FADAFAFAHHATADAFAFFAHDAADFADAFATITIHHAHHADDFADAFAFAHRIRIRIFAFFDAFAFHTRIAAFAFFAHDAADAAAAD\",\n  ],\n  [\n    \"FAAFAFFAHDAADFADAFAFAHHAHFADAFAFAHHAHHADDFAFFDAFAFHADDAADAFAFAHHAHHADDAFAFFAHDHADAAD\",\n    \"FADAFAFAHHAHHADDAAFAFFAHAFADAFAFAHHAHHADDAAFAFFDAFAFHADDAAFAFFAHDAADADFADAFAFAHHAHHADDFAHDAAD\",\n  ],\n  [\n    \"FADAFAFAHHARITIRITIFITIRFTIRFRIRFAHHARITIFARIFFFAHDAADFHHADDAAFAFFDAFAFHRIRITIAAFAFFAHDAADHADAAD\",\n    \"FADAFFADAFAFAHHAHFAITIAIFTRHDTTFAFAHHRITITIHADAADAFAHHAHHADDAITITRITIRDFADAFAFAHHAHHADDAAFAFFAHDA\",\n  ],\n  [\n    \"FADAFAADDAAFAFFAHDAADFADAFAAITIAIFTRFAFAHHAHHADDAAFAFFFAHHAHHDAITIAIFTRFADDAAFAFFAHDAADHADAAD\",\n    \"FHAHHADDAAFAFFAHDAADAAITIAIFTRHHAFADAFAFAHAITIRIITIFATIAHHADDAAFAFFAHDAADFADAFAFAHHAHHAAITIAIFTRAD\",\n  ],\n  [\n    \"FAAITIAIFTRADAFAFAHHAHFADAFAFAAITIAIFTRAHHAFAFAHHAHHADDAAFAFFAHDAADFADDAAFAFFDAFAFHADFAFFAHDAADHRTIRFD\",\n    \"FADATIRITIRFITIRFATIFTAFAHHAHHADDAAFAFFAFADAFAFAHHAHHADDAAFAITIAIFTRFFAHDAADFADAFAFAHHAHHADAADADFAHHAAFA\",\n  ],\n  [\n    \"FADAFTRIFTIFFAHDAADFADAFAFHAHFADAFTFIRITIAFAHHAHHADFAHHAHHADDAAFAFFDAFAFHADDAAFARTIRFAADHADAAD\",\n    \"FAHHAHHADDAAFAFFAHDAADFADAFATRIFITIFHFADAFAFAHHAHHADDAAFATRITIFIFAHDAADFADAFAFAHTRITIFIAADHADDAAFAFTRIRITIFAHDAAD\",\n  ],\n  [\n    \"FAADFADAFAFAHHTAHRFIIRITFARDAFATFAHHAIHTHAIDDAFIRRITADAIFAFAHHTAHHAIDDAARFAFFAIFIRITHYDAFRAFFDHADDAFIRITAFAFFAHDAADHAIDATAD\",\n    \"FADAFAFAHFIRITHAHHADDAAFAFFDAFFIRITAFHADDAAFAFFFIRITFADAFAFAHFIRITHAHHADDAAFATTFFDAFIAIFHRIADDAAFATIFFAHDAADAHDAAD\",\n  ],\n  [\n    \"HHFIRITAHHADDAAFAFFAHFIRITDAADFADFADRAFAFAIAFAFATHHAHIFADARFAFAHHTAHHIADDAATFAFFRDAFIAFHADIDIFFATHDTAARDIHADRAAD\",\n    \"FADAFHHAHHAFIRITDDAAFAFFAHDAAFIRITDIFFAFRAHHTAHHADIDAAFRAFFAFIADAFTAFAHHTAHHADDAAFAFIFAHDARADFIADAFRAFAHHIAHTHADAADHDAAD\",\n  ],\n];\n\nexport const longestIncreasingSequenceSample = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    -39,\n    -36,\n    73,\n    12,\n    92,\n    100,\n    -64,\n    -33,\n    86,\n    85,\n    1,\n    -34,\n    91,\n    74,\n    -37,\n    42,\n    57,\n    -31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    -67,\n    -62,\n    28,\n    8,\n    86,\n    -32,\n    -65,\n    48,\n    -60,\n    23,\n    2,\n    -35,\n    -67,\n    96,\n    5,\n    89,\n    12,\n    -36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    -39,\n    -69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    -38,\n    -66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    -32,\n    14,\n    -32,\n    50,\n    51,\n    9,\n    43,\n    -34,\n    4,\n    -65,\n    86,\n    94,\n    28,\n    29,\n    -35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    -3,\n    53,\n    -65,\n    -3,\n    51,\n    52,\n    11,\n    19,\n    -32,\n    46,\n    -67,\n    -35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    -30,\n    -69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    -3,\n    75,\n    82,\n    19,\n    -63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    -38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    -3,\n    52,\n    -62,\n    -38,\n    21,\n    85,\n  ],\n  [\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    -30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    -34,\n    0,\n    12,\n    -35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    -37,\n    93,\n    -36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    -33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    -67,\n    91,\n    24,\n    28,\n    -67,\n    48,\n    -30,\n    74,\n    90,\n    28,\n    73,\n    -33,\n    59,\n    98,\n    96,\n    12,\n    -69,\n    -65,\n    -37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    -65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91),\n  ],\n  [\n    58,\n    -31,\n    8,\n    88,\n    0,\n    -68,\n    91,\n    81,\n    -34,\n    1,\n    11,\n    82,\n    -39,\n    90,\n    -33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    -37,\n    88,\n    57,\n    -32,\n    8,\n    -39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    -3,\n    43,\n    99,\n    0,\n    -35,\n    93,\n    -30,\n    -30,\n    91,\n    -66,\n    88,\n    -32,\n    89,\n    94,\n    -3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    -31,\n    -66,\n    -30,\n    -62,\n    13,\n    21,\n    -69,\n    29,\n    86,\n    50,\n    89,\n    -65,\n    92,\n    29,\n    -64,\n    -66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    -68,\n    -31,\n    93,\n  ],\n  [\n    -66,\n    -35,\n    -68,\n    -6,\n    0,\n    -62,\n    75,\n    -36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    -32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    -3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    -31,\n    -32,\n    -63,\n    44,\n    56,\n    -68,\n    86,\n    84,\n    -60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    -69,\n    -6,\n    59,\n    4,\n    14,\n    70,\n    -63,\n    10,\n    94,\n    92,\n    -61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    -61,\n    82,\n    70,\n    12,\n    8,\n    -64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    -68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    -60,\n  ],\n  [\n    45,\n    -38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    -63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    -35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    -6,\n    76,\n    20,\n    -30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    -69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    -39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    -32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    -38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    -32,\n    9,\n    -30,\n    26,\n    50,\n    -3,\n    50,\n    79,\n    -31,\n    94,\n    40,\n    7,\n    49,\n    -3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    -67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    -69,\n    92,\n    89,\n    2,\n    86,\n    -34,\n    28,\n    81,\n    95,\n    -39,\n    21,\n    -30,\n    98,\n    81,\n    -38,\n    75,\n    -61,\n    89,\n    2,\n    -6,\n    79,\n    88,\n    -62,\n    43,\n    -62,\n    95,\n    47,\n    19,\n    1,\n    -69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    -61,\n    93,\n    -61,\n    71,\n    17,\n    -39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    -68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    -60,\n    70,\n    42,\n    -30,\n    71,\n    2,\n    48,\n    -39,\n    96,\n    -38,\n    2,\n    59,\n    -69,\n    -68,\n    -62,\n    90,\n    2,\n    -30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    -69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    -67,\n    95,\n    47,\n    -39,\n    16,\n    -3,\n    -39,\n    -6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    -61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    -64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    -62,\n    81,\n    4,\n    -3,\n    80,\n    -33,\n    79,\n    1,\n    71,\n    -69,\n    40,\n    -34,\n    -3,\n    1,\n    7,\n    -62,\n    46,\n    85,\n    43,\n    -67,\n    50,\n    -62,\n    57,\n    -61,\n    94,\n    -60,\n    73,\n    -3,\n    15,\n    -60,\n    83,\n    55,\n    -38,\n    87,\n    -61,\n    -6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    -65,\n    -38,\n    99,\n    -63,\n    13,\n    -63,\n    76,\n    24,\n    -66,\n    -65,\n    84,\n    15,\n    26,\n    -32,\n    90,\n    -61,\n    90,\n    84,\n    29,\n    46,\n    -60,\n    29,\n    17,\n    56,\n    -38,\n    98,\n    57,\n    99,\n    49,\n    -63,\n    76,\n    -62,\n    54,\n    22,\n    -34,\n    -32,\n    5,\n    -61,\n    73,\n    86,\n    -30,\n    -64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    -6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    -63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    -60,\n    18,\n    82,\n    14,\n    -30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    -39,\n    4,\n    83,\n    -63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    -36,\n    -66,\n    4,\n    80,\n  ],\n  [\n    81,\n    -65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    -65,\n    -33,\n    -3,\n    18,\n    59,\n    83,\n    -64,\n    72,\n    23,\n    52,\n    -6,\n    21,\n    53,\n    17,\n    -61,\n    89,\n    57,\n    8,\n    -64,\n    93,\n    1,\n    71,\n    -65,\n    59,\n    91,\n    -37,\n    78,\n    -67,\n    13,\n    19,\n    12,\n    1,\n    -39,\n    20,\n    -32,\n    -32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    -6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    -37,\n    -3,\n    5,\n    -65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    -65,\n    -33,\n    1,\n    -38,\n    41,\n    -39,\n    -3,\n    0,\n    48,\n    -60,\n    99,\n    -66,\n    52,\n  ],\n];\n\nexport const ChainMatrixSamples = [\n  [\n    10,\n    -68,\n    7,\n    80,\n    82,\n    90,\n    8,\n    39,\n    36,\n    73,\n    12,\n    92,\n    100,\n    64,\n    33,\n    86,\n    85,\n    1,\n    34,\n    91,\n    74,\n    37,\n    42,\n    57,\n    31,\n    55,\n    14,\n    82,\n    72,\n    46,\n    70,\n    10,\n    76,\n    67,\n    62,\n    28,\n    8,\n    86,\n    32,\n    65,\n    48,\n    60,\n    23,\n    2,\n    35,\n    67,\n    96,\n    5,\n    89,\n    12,\n    36,\n    53,\n    19,\n    94,\n    76,\n    72,\n    39,\n    69,\n    29,\n  ],\n  [\n    27,\n    92,\n    89,\n    58,\n    22,\n    94,\n    38,\n    66,\n    95,\n    46,\n    27,\n    85,\n    82,\n    32,\n    14,\n    32,\n    50,\n    51,\n    9,\n    43,\n    34,\n    4,\n    65,\n    86,\n    94,\n    28,\n    29,\n    35,\n    50,\n    74,\n    94,\n    25,\n    41,\n    76,\n    3,\n    53,\n    65,\n    3,\n    51,\n    52,\n    11,\n    19,\n    32,\n    46,\n    67,\n    35,\n    48,\n    11,\n    13,\n    81,\n    25,\n    4,\n    26,\n    30,\n    69,\n    22,\n    44,\n    84,\n    79,\n    72,\n    3,\n    75,\n    82,\n    19,\n    63,\n    86,\n    93,\n    10,\n    51,\n    12,\n    82,\n    82,\n    78,\n    95,\n    52,\n    11,\n    76,\n    81,\n    38,\n    45,\n    79,\n    48,\n    20,\n    73,\n    3,\n    52,\n    62,\n    38,\n    21,\n    85,\n  ][\n    (86,\n    86,\n    16,\n    86,\n    5,\n    52,\n    81,\n    74,\n    14,\n    52,\n    5,\n    15,\n    84,\n    4,\n    30,\n    97,\n    71,\n    18,\n    11,\n    21,\n    53,\n    81,\n    34,\n    0,\n    12,\n    35,\n    81,\n    45,\n    19,\n    23,\n    86,\n    70,\n    98,\n    37,\n    93,\n    36,\n    79,\n    14,\n    85,\n    27,\n    25,\n    7,\n    33,\n    24,\n    9,\n    83,\n    95,\n    90,\n    93,\n    9,\n    25,\n    23,\n    13,\n    97,\n    86,\n    96,\n    79,\n    67,\n    91,\n    24,\n    28,\n    67,\n    48,\n    30,\n    74,\n    90,\n    28,\n    73,\n    33,\n    59,\n    98,\n    96,\n    12,\n    69,\n    65,\n    37,\n    28,\n    95,\n    15,\n    49,\n    0,\n    59,\n    65,\n    80,\n    13,\n    2,\n    40,\n    19,\n    45,\n    91)\n  ],\n  [\n    58,\n    31,\n    8,\n    88,\n    0,\n    68,\n    91,\n    81,\n    34,\n    1,\n    11,\n    82,\n    39,\n    90,\n    33,\n    1,\n    16,\n    78,\n    57,\n    58,\n    73,\n    59,\n    72,\n    71,\n    97,\n    1,\n    37,\n    88,\n    57,\n    32,\n    8,\n    39,\n    10,\n    1,\n    40,\n    94,\n    18,\n    3,\n    43,\n    99,\n    0,\n    35,\n    93,\n    30,\n    30,\n    91,\n    66,\n    88,\n    32,\n    89,\n    94,\n    3,\n    26,\n    2,\n    96,\n    75,\n    90,\n    50,\n    17,\n    44,\n    10,\n    31,\n    66,\n    30,\n    62,\n    13,\n    21,\n    69,\n    29,\n    86,\n    50,\n    89,\n    65,\n    92,\n    29,\n    64,\n    66,\n    73,\n    24,\n    91,\n    18,\n    92,\n    93,\n    75,\n    88,\n    51,\n    84,\n    68,\n    31,\n    93,\n  ],\n  [\n    66,\n    35,\n    68,\n    6,\n    0,\n    62,\n    75,\n    36,\n    27,\n    2,\n    90,\n    18,\n    49,\n    23,\n    0,\n    28,\n    32,\n    83,\n    95,\n    45,\n    54,\n    74,\n    90,\n    83,\n    0,\n    51,\n    3,\n    15,\n    74,\n    47,\n    43,\n    70,\n    76,\n    31,\n    32,\n    63,\n    44,\n    56,\n    68,\n    86,\n    84,\n    60,\n    87,\n    94,\n    49,\n    23,\n    26,\n    7,\n    69,\n    6,\n    59,\n    4,\n    14,\n    70,\n    63,\n    10,\n    94,\n    92,\n    61,\n    52,\n    91,\n    99,\n    22,\n    12,\n    61,\n    82,\n    70,\n    12,\n    8,\n    64,\n    96,\n    25,\n    51,\n    53,\n    13,\n    1,\n    86,\n    87,\n    68,\n    84,\n    50,\n    79,\n    20,\n    43,\n    21,\n    71,\n    14,\n    70,\n    11,\n    60,\n  ],\n  [\n    45,\n    38,\n    42,\n    78,\n    86,\n    94,\n    58,\n    25,\n    63,\n    20,\n    23,\n    96,\n    75,\n    56,\n    35,\n    24,\n    5,\n    13,\n    10,\n    72,\n    6,\n    76,\n    20,\n    30,\n    13,\n    88,\n    53,\n    13,\n    9,\n    12,\n    29,\n    56,\n    91,\n    69,\n    28,\n    28,\n    15,\n    20,\n    96,\n    88,\n    10,\n    84,\n    75,\n    0,\n    39,\n    92,\n    24,\n    7,\n    91,\n    77,\n    0,\n    99,\n    21,\n    22,\n    43,\n    17,\n    81,\n    32,\n    47,\n    77,\n    11,\n    48,\n    40,\n    78,\n    83,\n    74,\n    38,\n    54,\n    12,\n    97,\n    58,\n    57,\n    32,\n    9,\n    30,\n    26,\n    50,\n    3,\n    50,\n    79,\n    31,\n    94,\n    40,\n    7,\n    49,\n    3,\n    74,\n    70,\n    78,\n    90,\n  ],\n  [\n    78,\n    96,\n    24,\n    88,\n    52,\n    87,\n    67,\n    81,\n    76,\n    27,\n    94,\n    17,\n    83,\n    69,\n    92,\n    89,\n    2,\n    86,\n    34,\n    28,\n    81,\n    95,\n    39,\n    21,\n    30,\n    98,\n    81,\n    38,\n    75,\n    61,\n    89,\n    2,\n    6,\n    79,\n    88,\n    62,\n    43,\n    62,\n    95,\n    47,\n    19,\n    1,\n    69,\n    94,\n    26,\n    16,\n    41,\n    7,\n    86,\n    29,\n    61,\n    93,\n    61,\n    71,\n    17,\n    39,\n    57,\n    56,\n    21,\n    45,\n    58,\n    68,\n    72,\n    71,\n    56,\n    95,\n    83,\n    87,\n    28,\n    95,\n    2,\n    60,\n    70,\n    42,\n    30,\n    71,\n    2,\n    48,\n    39,\n    96,\n    38,\n    2,\n    59,\n    69,\n    68,\n    62,\n    90,\n    2,\n    30,\n    27,\n  ],\n  [\n    97,\n    19,\n    41,\n    69,\n    82,\n    44,\n    51,\n    10,\n    19,\n    55,\n    90,\n    11,\n    80,\n    26,\n    51,\n    55,\n    54,\n    67,\n    95,\n    47,\n    39,\n    16,\n    3,\n    39,\n    6,\n    81,\n    24,\n    13,\n    7,\n    11,\n    61,\n    70,\n    73,\n    70,\n    82,\n    21,\n    19,\n    64,\n    48,\n    8,\n    17,\n    93,\n    21,\n    17,\n    86,\n    82,\n    53,\n    83,\n    16,\n    24,\n    62,\n    81,\n    4,\n    3,\n    80,\n    33,\n    79,\n    1,\n    71,\n    69,\n    40,\n    34,\n    3,\n    1,\n    7,\n    62,\n    46,\n    85,\n    43,\n    67,\n    50,\n    62,\n    57,\n    61,\n    94,\n    60,\n    73,\n    3,\n    15,\n    60,\n    83,\n    55,\n    38,\n    87,\n    61,\n    6,\n    74,\n    7,\n    52,\n    24,\n  ],\n  [\n    65,\n    38,\n    99,\n    63,\n    13,\n    63,\n    76,\n    24,\n    66,\n    65,\n    84,\n    15,\n    26,\n    32,\n    90,\n    61,\n    90,\n    84,\n    29,\n    46,\n    60,\n    29,\n    17,\n    56,\n    38,\n    98,\n    57,\n    99,\n    49,\n    63,\n    76,\n    62,\n    54,\n    22,\n    34,\n    32,\n    5,\n    61,\n    73,\n    86,\n    30,\n    64,\n    92,\n    99,\n    92,\n    14,\n    84,\n    6,\n    56,\n    48,\n    75,\n    21,\n    43,\n    77,\n    63,\n    10,\n    23,\n    2,\n    18,\n    12,\n    60,\n    18,\n    82,\n    14,\n    30,\n    89,\n    89,\n    96,\n    23,\n    29,\n    80,\n    82,\n    39,\n    4,\n    83,\n    63,\n    95,\n    7,\n    80,\n    44,\n    20,\n    22,\n    26,\n    80,\n    27,\n    98,\n    36,\n    66,\n    4,\n    80,\n  ],\n  [\n    81,\n    65,\n    76,\n    85,\n    77,\n    92,\n    44,\n    12,\n    86,\n    84,\n    1,\n    26,\n    82,\n    57,\n    11,\n    29,\n    89,\n    7,\n    83,\n    65,\n    33,\n    3,\n    18,\n    59,\n    83,\n    64,\n    72,\n    23,\n    52,\n    6,\n    21,\n    53,\n    17,\n    61,\n    89,\n    57,\n    8,\n    64,\n    93,\n    1,\n    71,\n    65,\n    59,\n    91,\n    37,\n    78,\n    67,\n    13,\n    19,\n    12,\n    1,\n    39,\n    20,\n    32,\n    32,\n    1,\n    45,\n    2,\n    12,\n    17,\n    59,\n    6,\n    24,\n    81,\n    26,\n    41,\n    14,\n    99,\n    37,\n    3,\n    5,\n    65,\n    29,\n    72,\n    11,\n    84,\n    93,\n    65,\n    33,\n    1,\n    38,\n    41,\n    39,\n    3,\n    0,\n    48,\n    60,\n    99,\n    66,\n    52,\n  ],\n];\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}