{"version":3,"sources":["Components/UIElements/Basic/Button.js","App/components/MainCard.js","App/components/UcFirst.js"],"names":["BasicButton","React","Component","render","buttonVariants","buttonOptions","variant","icon","basicButtons","map","idx","key","overlay","text","outlineButtons","squareButtons","className","basicDropdownButton","button","title","id","Item","eventKey","splitDropdownButton","Divider","MainCard","state","isOption","this","props","fullCard","collapseCard","loadCard","cardRemove","cardReloadHandler","setState","setInterval","cardRemoveHandler","fullScreenStyle","loader","cardHeaderRight","cardHeader","card","cardClass","alignRight","Toggle","Menu","as","onClick","prevState","href","DEMO","BLANK_LINK","Header","Title","position","top","left","right","width","windowWidth","height","windowHeight","join","style","in","Body","children","windowSize","UcFirst","string","charAt","toUpperCase","slice"],"mappings":"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","file":"static/js/18.a325f990.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Button,\r\n    OverlayTrigger,\r\n    Tooltip,\r\n    ButtonToolbar,\r\n    Dropdown,\r\n    DropdownButton,\r\n    SplitButton\r\n} from 'react-bootstrap';\r\n\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport Card from \"../../../App/components/MainCard\";\r\nimport UcFirst from \"../../../App/components/UcFirst\";\r\n\r\nclass BasicButton extends React.Component {\r\n    render() {\r\n        const buttonVariants = [\r\n            'primary',\r\n            'secondary',\r\n            'success',\r\n            'danger',\r\n            'warning',\r\n            'info',\r\n            'light',\r\n            'dark',\r\n        ];\r\n\r\n        const buttonOptions = [\r\n            {variant: 'primary', icon:'feather icon-thumbs-up'},\r\n            {variant: 'secondary', icon:'feather icon-camera'},\r\n            {variant: 'success', icon:'feather icon-check-circle'},\r\n            {variant: 'danger', icon:'feather icon-slash'},\r\n            {variant: 'warning', icon:'feather icon-alert-triangle'},\r\n            {variant: 'info', icon:'feather icon-info'}\r\n        ];\r\n\r\n        const basicButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{variant}</Tooltip>}>\r\n                <Button variant={variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const outlineButtons = buttonVariants.map((variant, idx) => (\r\n            <OverlayTrigger key={idx} overlay={<Tooltip>{'outline-'+variant}</Tooltip>}>\r\n                <Button variant={'outline-'+variant}><UcFirst text={variant} /></Button>\r\n            </OverlayTrigger>\r\n        ));\r\n\r\n        const squareButtons = buttonVariants.map((variant, idx) => <Button key={idx} className='btn-square' variant={variant}><UcFirst text={variant} /></Button>);\r\n\r\n\r\n        const basicDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <DropdownButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                </DropdownButton>\r\n            );\r\n        });\r\n\r\n        const splitDropdownButton = buttonOptions.map(\r\n            button => {\r\n                const title = <UcFirst text={button.variant} />;\r\n                return (\r\n                <SplitButton\r\n                    title={title}\r\n                    variant={button.variant}\r\n                    id={`dropdown-split-variants-${button.variant}`}\r\n                    key={button.variant}\r\n                    className=\"mr-2 mb-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else hear</Dropdown.Item>\r\n                    <Dropdown.Divider />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </SplitButton>\r\n            );\r\n        });\r\n\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Default\">\r\n                            <p>use <code>variant=\"*\"</code> props in component <code>Button</code> to get various button</p>\r\n                            {basicButtons}\r\n                            <OverlayTrigger overlay={<Tooltip>link</Tooltip>}>\r\n                                <Button variant=\"link\">Link</Button>\r\n                            </OverlayTrigger>\r\n                        </Card>\r\n                        <Card title=\"Outline\">\r\n                            <p>use <code>variant=\"outline-*\"</code> props in component <code>Button</code> to get various outline button</p>\r\n                            {outlineButtons}\r\n                        </Card>\r\n                        <Card title=\"Square Button\">\r\n                            <p>use <code>className=\"btn-square\"</code> props in component <code>Button</code> to get square button</p>\r\n                            {squareButtons}\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card title=\"Basic Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {basicDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                        <Card title=\"Split Dropdown Button\">\r\n                            <ButtonToolbar>\r\n                                {splitDropdownButton}\r\n                            </ButtonToolbar>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicButton;\r\n","import React, { Component } from \"react\";\r\nimport { Dropdown, Card, Collapse } from \"react-bootstrap\";\r\nimport windowSize from \"react-window-size\";\r\n\r\nimport Aux from \"../../hoc/_Aux\";\r\nimport DEMO from \"../../store/constant\";\r\n\r\nclass MainCard extends Component {\r\n  state = {\r\n    isOption: this.props.isOption,\r\n    fullCard: false,\r\n    collapseCard: false,\r\n    loadCard: false,\r\n    cardRemove: false,\r\n  };\r\n\r\n  cardReloadHandler = () => {\r\n    this.setState({ loadCard: true });\r\n    setInterval(() => {\r\n      this.setState({ loadCard: false });\r\n    }, 3000);\r\n  };\r\n\r\n  cardRemoveHandler = () => {\r\n    this.setState({ cardRemove: true });\r\n  };\r\n\r\n  render() {\r\n    let fullScreenStyle, loader, cardHeaderRight, cardHeader;\r\n    let card = \"\";\r\n    let cardClass = [];\r\n\r\n    if (this.state.isOption) {\r\n      cardHeaderRight = (\r\n        <div className=\"card-header-right\">\r\n          <Dropdown alignRight={true} className=\"btn-group card-option\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\" className=\"btn-icon\">\r\n              <i className=\"feather icon-more-horizontal\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu as=\"ul\" className=\"list-unstyled card-option\">\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { fullCard: !prevState.fullCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={\r\n                    this.state.fullCard ? \"feather icon-minimize\" : \"feather icon-maximize\"\r\n                  }\r\n                />\r\n                <a href={DEMO.BLANK_LINK}> {this.state.fullCard ? \"Restore\" : \"Maximize\"} </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item\r\n                as=\"li\"\r\n                className=\"dropdown-item\"\r\n                onClick={() => {\r\n                  this.setState((prevState) => {\r\n                    return { collapseCard: !prevState.collapseCard };\r\n                  });\r\n                }}\r\n              >\r\n                <i\r\n                  className={this.state.collapseCard ? \"feather icon-plus\" : \"feather icon-minus\"}\r\n                />\r\n                <a href={DEMO.BLANK_LINK}> {this.state.collapseCard ? \"Expand\" : \"Collapse\"} </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={this.cardReloadHandler}>\r\n                <i className=\"feather icon-refresh-cw\" />\r\n                <a href={DEMO.BLANK_LINK}> Reload </a>\r\n              </Dropdown.Item>\r\n              <Dropdown.Item as=\"li\" className=\"dropdown-item\" onClick={this.cardRemoveHandler}>\r\n                <i className=\"feather icon-trash\" />\r\n                <a href={DEMO.BLANK_LINK}> Remove </a>\r\n              </Dropdown.Item>\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    cardHeader = (\r\n      <Card.Header>\r\n        <Card.Title as=\"h5\">{this.props.title}</Card.Title>\r\n        {cardHeaderRight}\r\n      </Card.Header>\r\n    );\r\n\r\n    if (this.state.fullCard) {\r\n      cardClass = [...cardClass, \"full-card\"];\r\n      fullScreenStyle = {\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        right: 0,\r\n        width: this.props.windowWidth,\r\n        height: this.props.windowHeight,\r\n      };\r\n    }\r\n\r\n    if (this.state.loadCard) {\r\n      cardClass = [...cardClass, \"card-load\"];\r\n      loader = (\r\n        <div className=\"card-loader\">\r\n          <i className=\"pct-loader1 anim-rotate\" />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (this.state.cardRemove) {\r\n      cardClass = [...cardClass, \"d-none\"];\r\n    }\r\n\r\n    if (this.props.cardClass) {\r\n      cardClass = [...cardClass, this.props.cardClass];\r\n    }\r\n\r\n    card = (\r\n      <Card className={cardClass.join(\" \")} style={fullScreenStyle}>\r\n        {cardHeader}\r\n        <Collapse in={!this.state.collapseCard}>\r\n          <div>\r\n            <Card.Body>{this.props.children}</Card.Body>\r\n          </div>\r\n        </Collapse>\r\n        {loader}\r\n      </Card>\r\n    );\r\n\r\n    return <Aux>{card}</Aux>;\r\n  }\r\n}\r\n\r\nexport default windowSize(MainCard);\r\n","import React from 'react';\r\n\r\nclass UcFirst extends React.Component {\r\n    render() {\r\n        const string = this.props.text;\r\n        return string.charAt(0).toUpperCase() + string.slice(1);\r\n    }\r\n}\r\n\r\nexport default UcFirst;"],"sourceRoot":""}