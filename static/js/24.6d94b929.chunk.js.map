{"version":3,"sources":["Screens/Sets/BalancedPartition.js","Algorithms/BalancedPartition.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["LongestIncreasingSubsequence","_useState","useState","_useState2","Object","slicedToArray","partitions","setPartitions","_useState3","_useState4","init","setInit","react_default","a","createElement","_Aux","Row","Col","MainCard","title","md","CardDeck","Form","Group","Label","Control","id","onChange","data","document","getElementById","value","split","result","arr","sum","reduce","total","num","part","Array","fill","length","map","row","i","j","console","log","balancedPartition","item","parseInt","type","placeholder","Text","className","_createWithBsPrefix__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__"],"mappings":"+KAqDeA,UA9CsB,WAAM,IAAAC,EACLC,oBAAS,GADJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClCK,EADkCH,EAAA,GACtBI,EADsBJ,EAAA,GAAAK,EAEjBN,oBAAS,GAFQO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAElCE,EAFkCD,EAAA,GAE5BE,EAF4BF,EAAA,GAWzC,OACEG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,MAAM,sBAAZ,kLAMJP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKG,GAAI,IACPR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,MAAM,SACVP,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACEV,EAAAC,EAAAC,cAACQ,EAAA,EAAKC,MAAN,KACEX,EAAAC,EAAAC,cAACQ,EAAA,EAAKE,MAAN,yBACAZ,EAAAC,EAAAC,cAACQ,EAAA,EAAKG,QAAN,CACEC,GAAG,mBACHC,SA3BO,WACvB,IAAIC,EAAOC,SAASC,eAAe,oBAAoBC,MAAMC,MAAM,KAE/DC,ECVO,SAAsBC,GAGnC,IAAIC,EAAMD,EAAIE,OAAO,SAACC,EAAOC,GAAR,OAAgBD,EAAQC,GAAK,GAGlD,GAAIH,EAAM,IAAM,EAAG,OAAO,EAE1B,IAAII,EAAOC,MAAML,EAAM,EAAI,GAAGM,KAAKD,MAAMN,EAAIQ,OAAS,IAItDH,EAAKI,IAAI,SAACC,GAAD,OAAUA,EAAI,IAAK,IAI5BL,EAAK,GAAKC,MAAMN,EAAIQ,OAAS,GAAGD,MAAK,GAGrC,IAAK,IAAII,EAAI,EAAGA,GAAKV,EAAM,EAAGU,IAC5B,IAAK,IAAIC,EAAI,EAAGA,GAAKZ,EAAIQ,OAAQI,IAC/BP,EAAKM,GAAGC,GAAKP,EAAKM,GAAGC,EAAI,GACrBD,GAAKX,EAAIY,EAAI,KAAIP,EAAKM,GAAGC,GAAKP,EAAKM,GAAGC,IAAMP,EAAKM,EAAIX,EAAIY,EAAI,IAAIA,EAAI,IAS7E,OADAC,QAAQC,IAAIT,GACLA,EAAKJ,EAAM,GAAGD,EAAIQ,QDrBVO,CADbrB,EAAOA,EAAKe,IAAI,SAACO,GAAD,OAAUC,SAASD,MAEnCH,QAAQC,IAAIf,GACZ1B,EAAc0B,GACdtB,GAAQ,IAsBQyC,KAAK,OACLC,YAAY,UAEdzC,EAAAC,EAAAC,cAACQ,EAAA,EAAKgC,KAAN,CAAWC,UAAU,cAArB,uCAIN3C,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,MAAM,UAAUT,EAAQJ,EAAa,WAAa,eAAkB,6CE7CtF,IAAAkD,EAAAC,EAAA,IACeC,EAAA,EAAAtD,OAAAoD,EAAA,GAAkB","file":"static/js/24.6d94b929.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport balancedPartition from \"../../Algorithms/BalancedPartition\";\n\nconst LongestIncreasingSubsequence = () => {\n  const [partitions, setPartitions] = useState(false);\n  const [init, setInit] = useState(false);\n  const updatePartitions = () => {\n    let data = document.getElementById(\"balancePartition\").value.split(\" \");\n    data = data.map((item) => parseInt(item));\n    let result = balancedPartition(data);\n    console.log(result);\n    setPartitions(result);\n    setInit(true);\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Balanced Partition\">\n            Given a set of integers, partition those integers into two parts where the difference\n            between the two parts is minimum. This problem is known as balanced partition problem.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n          <CardDeck>\n            <Card title=\"Input\">\n              <Form>\n                <Form.Group>\n                  <Form.Label>Partition Number</Form.Label>\n                  <Form.Control\n                    id=\"balancePartition\"\n                    onChange={updatePartitions}\n                    type=\"text\"\n                    placeholder=\"10...\"\n                  />\n                  <Form.Text className=\"text-muted\">Kindly Input The Partition Space</Form.Text>\n                </Form.Group>\n              </Form>\n            </Card>\n            <Card title=\"Output\">{init ? (partitions ? \"Possible\" : \"Not Possible\") : \"---\"}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LongestIncreasingSubsequence;\n","// A Dynamic Programming based\n// Returns true if arr[] can be partitioned in two subsets of equal sum, otherwise false\n\nexport default function findPartiion(arr) {\n  // console.log(arr);\n  // Calculate sum of all elements\n  let sum = arr.reduce((total, num) => total + num, 0);\n\n  // check if total output isn't even we can't divide\n  if (sum % 2 !== 0) return false;\n\n  let part = Array(sum / 2 + 1).fill(Array(arr.length + 1));\n  // bool part[sum / 2 + 1][n + 1];\n\n  // initialize leftmost column,\n  part.map((row) => (row[0] = false));\n  // console.log(\"something\", part);\n\n  // initialize top row as true\n  part[0] = Array(arr.length + 1).fill(true);\n\n  // Fill the partition table in bottom up manner\n  for (let i = 1; i <= sum / 2; i++) {\n    for (let j = 1; j <= arr.length; j++) {\n      part[i][j] = part[i][j - 1];\n      if (i >= arr[j - 1]) part[i][j] = part[i][j] || part[i - arr[j - 1]][j - 1];\n    }\n  }\n\n  // uncomment this part to print table\n  // for (i = 0; i <= sum / 2; i++) {\n  //   for (j = 0; j <= arr.length; j++) console.log(part[i][j]);\n  // }\n  console.log(part);\n  return part[sum / 2][arr.length];\n}\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}