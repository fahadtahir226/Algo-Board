{"version":3,"sources":["Screens/Sets/BalancedPartition.js","Algorithms/BalancedPartition.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["LongestIncreasingSubsequence","useState","partitions","setPartitions","init","setInit","Row","Col","title","md","CardDeck","Form","Group","Label","Control","id","onChange","data","document","getElementById","value","split","map","item","parseInt","result","arr","sum","reduce","total","num","part","Array","fill","length","row","i","j","console","log","balancedPartition","type","placeholder","Text","className","createWithBsPrefix"],"mappings":"qMAqDeA,UA9CsB,KAAO,MAAD,EACLC,oBAAS,GADJ,mBAClCC,EADkC,KACtBC,EADsB,OAEjBF,oBAAS,GAFQ,mBAElCG,EAFkC,KAE5BC,EAF4B,KAWzC,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,sBAAZ,kLAMJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,GAAI,IACP,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMF,MAAM,SACV,kBAACG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,yBACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,mBACHC,SA3BO,KACvB,IAAIC,EAAOC,SAASC,eAAe,oBAAoBC,MAAMC,MAAM,KACnEJ,EAAOA,EAAKK,IAAKC,GAASC,SAASD,IACnC,IAAIE,ECVO,SAAsBC,GAGnC,IAAIC,EAAMD,EAAIE,OAAO,CAACC,EAAOC,IAAQD,EAAQC,EAAK,GAGlD,GAAIH,EAAM,IAAM,EAAG,OAAO,EAE1B,IAAII,EAAOC,MAAML,EAAM,EAAI,GAAGM,KAAKD,MAAMN,EAAIQ,OAAS,IAItDH,EAAKT,IAAKa,GAASA,EAAI,IAAK,GAI5BJ,EAAK,GAAKC,MAAMN,EAAIQ,OAAS,GAAGD,MAAK,GAGrC,IAAK,IAAIG,EAAI,EAAGA,GAAKT,EAAM,EAAGS,IAC5B,IAAK,IAAIC,EAAI,EAAGA,GAAKX,EAAIQ,OAAQG,IAC/BN,EAAKK,GAAGC,GAAKN,EAAKK,GAAGC,EAAI,GACrBD,GAAKV,EAAIW,EAAI,KAAIN,EAAKK,GAAGC,GAAKN,EAAKK,GAAGC,IAAMN,EAAKK,EAAIV,EAAIW,EAAI,IAAIA,EAAI,IAS7E,OADAC,QAAQC,IAAIR,GACLA,EAAKJ,EAAM,GAAGD,EAAIQ,QDrBVM,CAAkBvB,GAC/BqB,QAAQC,IAAId,GACZtB,EAAcsB,GACdpB,GAAQ,IAsBQoC,KAAK,OACLC,YAAY,UAEd,kBAAC/B,EAAA,EAAKgC,KAAN,CAAWC,UAAU,cAArB,uCAIN,kBAAC,IAAD,CAAMpC,MAAM,UAAUJ,EAAQF,EAAa,WAAa,eAAkB,a,gCE7CtF,YACe2C,gBAAmB","file":"static/js/24.06dd57e6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport balancedPartition from \"../../Algorithms/BalancedPartition\";\n\nconst LongestIncreasingSubsequence = () => {\n  const [partitions, setPartitions] = useState(false);\n  const [init, setInit] = useState(false);\n  const updatePartitions = () => {\n    let data = document.getElementById(\"balancePartition\").value.split(\" \");\n    data = data.map((item) => parseInt(item));\n    let result = balancedPartition(data);\n    console.log(result);\n    setPartitions(result);\n    setInit(true);\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Balanced Partition\">\n            Given a set of integers, partition those integers into two parts where the difference\n            between the two parts is minimum. This problem is known as balanced partition problem.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n          <CardDeck>\n            <Card title=\"Input\">\n              <Form>\n                <Form.Group>\n                  <Form.Label>Partition Number</Form.Label>\n                  <Form.Control\n                    id=\"balancePartition\"\n                    onChange={updatePartitions}\n                    type=\"text\"\n                    placeholder=\"10...\"\n                  />\n                  <Form.Text className=\"text-muted\">Kindly Input The Partition Space</Form.Text>\n                </Form.Group>\n              </Form>\n            </Card>\n            <Card title=\"Output\">{init ? (partitions ? \"Possible\" : \"Not Possible\") : \"---\"}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LongestIncreasingSubsequence;\n","// A Dynamic Programming based\n// Returns true if arr[] can be partitioned in two subsets of equal sum, otherwise false\n\nexport default function findPartiion(arr) {\n  // console.log(arr);\n  // Calculate sum of all elements\n  let sum = arr.reduce((total, num) => total + num, 0);\n\n  // check if total output isn't even we can't divide\n  if (sum % 2 !== 0) return false;\n\n  let part = Array(sum / 2 + 1).fill(Array(arr.length + 1));\n  // bool part[sum / 2 + 1][n + 1];\n\n  // initialize leftmost column,\n  part.map((row) => (row[0] = false));\n  // console.log(\"something\", part);\n\n  // initialize top row as true\n  part[0] = Array(arr.length + 1).fill(true);\n\n  // Fill the partition table in bottom up manner\n  for (let i = 1; i <= sum / 2; i++) {\n    for (let j = 1; j <= arr.length; j++) {\n      part[i][j] = part[i][j - 1];\n      if (i >= arr[j - 1]) part[i][j] = part[i][j] || part[i - arr[j - 1]][j - 1];\n    }\n  }\n\n  // uncomment this part to print table\n  // for (i = 0; i <= sum / 2; i++) {\n  //   for (j = 0; j <= arr.length; j++) console.log(part[i][j]);\n  // }\n  console.log(part);\n  return part[sum / 2][arr.length];\n}\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}