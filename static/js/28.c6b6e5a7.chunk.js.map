{"version":3,"sources":["Algorithms/Knapsack.js","Screens/Sets/Knapsack.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["knapsack","bucketSize","weights","profits","n","K","Array","fill","i","w","Math","max","console","log","Knapsack","useState","setProfits","setWeights","setBucketSize","items","setItems","init","setInit","useEffect","Row","Col","title","CardDeck","isOption","setSample","sampleNum","md","Form","Group","controlId","Label","Control","defaultValue","onChange","new_profits","document","getElementById","value","split","map","profit","parseInt","isNaN","length","pop","type","placeholder","Text","className","new_weights","weight","new_bucketSize","createWithBsPrefix"],"mappings":"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","file":"static/js/28.c6b6e5a7.chunk.js","sourcesContent":["/**\n * Dynamic programming approach to find Knapsack.\n * Time Complexity: O(N*W).\n *\n * @param {number[]} bucketSize\n * @param {number[]} weights\n * @param {number[]} profits\n * @param {number} n\n * @return {number}\n */\nconst knapsack = (bucketSize, weights, profits, n) => {\n  let K = Array(n + 1).fill(Array(bucketSize + 1).fill(0));\n  // Build table K[][] in bottom up manner\n  for (let i = 0; i <= n; i++) {\n    for (let w = 0; w <= bucketSize; w++) {\n      if (i == 0 || w == 0) K[i][w] = 0;\n      else if (weights[i - 1] <= w)\n        K[i][w] = Math.max(profits[i - 1] + K[i - 1][w - weights[i - 1]], K[i - 1][w]);\n      else K[i][w] = K[i - 1][w];\n    }\n  }\n  console.log(K);\n  return K[n][bucketSize];\n};\n\nexport default knapsack;\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport knapsack from \"../../Algorithms/Knapsack\";\n\nconst Knapsack = () => {\n  const [profits, setProfits] = useState(\"\");\n  const [weights, setWeights] = useState(\"\");\n  const [bucketSize, setBucketSize] = useState();\n  const [items, setItems] = useState(\"---\");\n  const [init, setInit] = useState(false);\n\n  const updateProfits = () => {\n    if (!weights || !bucketSize) return;\n    let new_profits = document.getElementById(\"profits\").value.split(\" \");\n    new_profits = new_profits.map((profit) => parseInt(profit));\n    if (isNaN(new_profits[new_profits.length - 1])) {\n      new_profits.pop();\n    }\n    setProfits(new_profits);\n    setItems(knapsack(2, [1, 1, 1], new_profits, 3));\n    setInit(true);\n  };\n  const updateWeights = () => {\n    if (!profits || !bucketSize) return;\n    let new_weights = document.getElementById(\"weights\").value.split(\" \");\n    new_weights = new_weights.map((weight) => parseInt(weight));\n    if (isNaN(new_weights[new_weights.length - 1])) {\n      new_weights.pop();\n    }\n    setWeights(new_weights);\n    setItems(knapsack(2, new_weights, [10, 20, 30], 3));\n    setInit(true);\n  };\n\n  const updateBucketSize = () => {\n    if (!profits || !weights) return;\n\n    let new_bucketSize = parseInt(document.getElementById(\"bucketSize\").value);\n    console.log(new_bucketSize);\n    if (!new_bucketSize) return;\n    setBucketSize(new_bucketSize);\n    setItems(knapsack(new_bucketSize, weights, profits, 3));\n    setInit(true);\n  };\n  const setSample = (sampleNum) => {\n    console.log(sampleNum);\n  };\n  useEffect(() => {\n    console.log(knapsack(2, [1, 1, 1], [10, 20, 30], 3));\n  }, []);\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Knapsack\">\n            Given weights and values of n items, put these items in a knapsack of capacity W to get\n            the maximum total value in the knapsack.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\" isOption setSample={setSample}>\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"profits\">\n                      <Form.Label>Profits</Form.Label>\n                      <Form.Control\n                        defaultValue={profits}\n                        onChange={updateProfits}\n                        type=\"text\"\n                        placeholder=\"1 2 3 ...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Profits with Spaces</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"weights\">\n                      <Form.Label>Weights</Form.Label>\n                      <Form.Control\n                        defaultValue={weights}\n                        onChange={updateWeights}\n                        type=\"text\"\n                        placeholder=\"1 2 3 ...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Wdights with Spaces</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"bucketSize\">\n                      <Form.Label>Bucket Size</Form.Label>\n                      <Form.Control\n                        defaultValue={bucketSize}\n                        onChange={updateBucketSize}\n                        type=\"number\"\n                        placeholder=\"10 ...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input bucket size</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">{init ? items : \"---\"}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default Knapsack;\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}