{"version":3,"sources":["Algorithms/LevenshteinDistance.js","Screens/Strings/LevenshteinDistance.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["levenshteinDistance","a","b","distanceMatrix","Array","length","fill","map","i","j","indicator","Math","min","LevenshteinDistance","useState","str1","setStr1","str2","setStr2","dist","setDist","Row","Col","title","CardDeck","md","Form","Group","controlId","Label","Control","defaultValue","id","onChange","firstSeq","document","getElementById","value","type","placeholder","Text","className","secondSeq","createWithBsPrefix"],"mappings":"qMAKe,SAASA,EAAoBC,EAAGC,GAG7C,MAAMC,EAAiBC,MAAMF,EAAEG,OAAS,GACrCC,KAAK,MACLC,IAAI,IAAMH,MAAMH,EAAEI,OAAS,GAAGC,KAAK,OAKtC,IAAK,IAAIE,EAAI,EAAGA,GAAKP,EAAEI,OAAQG,GAAK,EAClCL,EAAe,GAAGK,GAAKA,EAMzB,IAAK,IAAIC,EAAI,EAAGA,GAAKP,EAAEG,OAAQI,GAAK,EAClCN,EAAeM,GAAG,GAAKA,EAGzB,IAAK,IAAIA,EAAI,EAAGA,GAAKP,EAAEG,OAAQI,GAAK,EAClC,IAAK,IAAID,EAAI,EAAGA,GAAKP,EAAEI,OAAQG,GAAK,EAAG,CACrC,MAAME,EAAYT,EAAEO,EAAI,KAAON,EAAEO,EAAI,GAAK,EAAI,EAC9CN,EAAeM,GAAGD,GAAKG,KAAKC,IAC1BT,EAAeM,GAAGD,EAAI,GAAK,EAC3BL,EAAeM,EAAI,GAAGD,GAAK,EAC3BL,EAAeM,EAAI,GAAGD,EAAI,GAAKE,GAKrC,OAAOP,EAAeD,EAAEG,QAAQJ,EAAEI,QCsCrBQ,UApEa,KAAO,MAAD,EACRC,mBAAS,IADD,mBACzBC,EADyB,KACnBC,EADmB,OAERF,mBAAS,IAFD,mBAEzBG,EAFyB,KAEnBC,EAFmB,OAGRJ,mBAAS,GAHD,mBAGzBK,EAHyB,KAGnBC,EAHmB,KAehC,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,wBAAZ,kSAQJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMD,MAAM,SACV,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKG,GAAI,IACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,kBACpB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,aAAchB,EACdiB,GAAG,OACHC,SAlCH,KACjB,IAAIC,EAAWC,SAASC,eAAe,QAAQC,MAC/CrB,EAAQkB,GACRd,EAAQpB,EAAoBkC,EAAUjB,KAgClBqB,KAAK,OACLC,YAAY,iBAEd,kBAACb,EAAA,EAAKc,KAAN,CAAWC,UAAU,cAArB,8BAEF,kBAACf,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCACpB,kBAACF,EAAA,EAAKG,MAAN,sBACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,aAAcd,EACde,GAAG,OACHC,SAxCH,KACjB,IAAIS,EAAYP,SAASC,eAAe,QAAQC,MAChDnB,EAAQwB,GACRtB,EAAQpB,EAAoBe,EAAM2B,KAsCdJ,KAAK,OACLC,YAAY,iBAEd,kBAACb,EAAA,EAAKc,KAAN,CAAWC,UAAU,cAArB,mCAMV,kBAAC,IAAD,CAAMlB,MAAM,UAAZ,yBAA4CJ,S,gCCnExD,YACewB,gBAAmB","file":"static/js/28.62c276d4.chunk.js","sourcesContent":["/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nexport default function levenshteinDistance(a, b) {\n  // Create empty edit distance matrix for all possible modifications of\n  // substrings of a to substrings of b.\n  const distanceMatrix = Array(b.length + 1)\n    .fill(null)\n    .map(() => Array(a.length + 1).fill(null));\n\n  // Fill the first row of the matrix.\n  // If this is first row then we're transforming empty string to a.\n  // In this case the number of transformations equals to size of a substring.\n  for (let i = 0; i <= a.length; i += 1) {\n    distanceMatrix[0][i] = i;\n  }\n\n  // Fill the first column of the matrix.\n  // If this is first column then we're transforming empty string to b.\n  // In this case the number of transformations equals to size of b substring.\n  for (let j = 0; j <= b.length; j += 1) {\n    distanceMatrix[j][0] = j;\n  }\n\n  for (let j = 1; j <= b.length; j += 1) {\n    for (let i = 1; i <= a.length; i += 1) {\n      const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n      distanceMatrix[j][i] = Math.min(\n        distanceMatrix[j][i - 1] + 1, // deletion\n        distanceMatrix[j - 1][i] + 1, // insertion\n        distanceMatrix[j - 1][i - 1] + indicator // substitution\n      );\n    }\n  }\n\n  return distanceMatrix[b.length][a.length];\n}\n","import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport levenshteinDistance from \"../../Algorithms/LevenshteinDistance\";\n\nconst LevenshteinDistance = () => {\n  const [str1, setStr1] = useState(\"\");\n  const [str2, setStr2] = useState(\"\");\n  const [dist, setDist] = useState(0);\n\n  const updateStr1 = () => {\n    let firstSeq = document.getElementById(\"str1\").value;\n    setStr1(firstSeq);\n    setDist(levenshteinDistance(firstSeq, str2));\n  };\n  const updateStr2 = () => {\n    let secondSeq = document.getElementById(\"str2\").value;\n    setStr2(secondSeq);\n    setDist(levenshteinDistance(str1, secondSeq));\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Levenshtein Distance\">\n            The Levenshtein distance is a string metric for measuring difference between two\n            sequences. Informally, the Levenshtein distance between two words is the minimum number\n            of single-character edits (i.e. insertions, deletions or substitutions) required to\n            change one word into the other.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\">\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>First String</Form.Label>\n                      <Form.Control\n                        defaultValue={str1}\n                        id=\"str1\"\n                        onChange={updateStr1}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input First String</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                      <Form.Label>Second String</Form.Label>\n                      <Form.Control\n                        defaultValue={str2}\n                        id=\"str2\"\n                        onChange={updateStr2}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Second String</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">Levenshtein Distance: {dist}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LevenshteinDistance;\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}