{"version":3,"sources":["Screens/Maths/ChainMatrixMultiplication.js","Algorithms/ChainMatrixMultiplication.js"],"names":["ChainMatrixMultiplication","useState","chainOrder","setChainOrder","Row","Col","title","md","Form","Group","Label","Control","id","onChange","data","document","getElementById","value","split","map","item","parseInt","isNaN","length","pop","MatrixChainOrder","matrixArray","i","dp","Array","fill","j","Infinity","k","Math","min","console","log","matrixChainOrder","as","placeholder","rows","Text","className"],"mappings":"6LA4DeA,UArDmB,KAAO,MAAD,EACFC,mBAAS,GADP,mBAC/BC,EAD+B,KACnBC,EADmB,KAUtC,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,+BAAZ,4FAKJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKE,GAAI,IACP,kBAAC,IAAD,CAAMD,MAAM,SACV,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACG,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,gBACA,kBAACF,EAAA,EAAKG,QAAN,CACEC,GAAG,8BACHC,SA1Bc,KAChC,IAAIC,EAAOC,SAASC,eAAe,+BAA+BC,MAAMC,MAAM,KAC9EJ,EAAOA,EAAKK,IAAKC,GAASC,SAASD,IAC/BE,MAAMR,EAAKA,EAAKS,OAAS,KAAKT,EAAKU,MACvCrB,ECdW,SAASsB,EAAiBC,EAAaC,GACpD,IAAIC,EAAKC,MAAM,IAAIC,KAAKD,MAAM,IAAIC,MAAM,IACtCC,EAAIL,EAAYH,OAAS,EAC3B,GAAII,GAAKI,EAAG,OAAO,EAEnB,IAAiB,GAAbH,EAAGD,GAAGI,GAAU,OAAOH,EAAGD,GAAGI,GAEjCH,EAAGD,GAAGI,GAAKC,IACX,IAAK,IAAIC,EAAIN,EAAGM,EAAIF,EAAGE,IACrBL,EAAGD,GAAGI,GAAKG,KAAKC,IACdP,EAAGD,GAAGI,GACNN,EAAiBC,EAAaC,GAC5BF,EAAiBC,EAAaO,EAAI,GAClCP,EAAYC,EAAI,GAAKD,EAAYO,GAAKP,EAAYK,IAIxD,OADAK,QAAQC,IAAIT,GACLA,EAAGD,GAAGI,GDHGO,CAAiBxB,EAAM,KAuBnByB,GAAG,WACHC,YAAY,WACZC,KAAK,MAEP,kBAACjC,EAAA,EAAKkC,KAAN,CAAWC,UAAU,cAArB,0CAQd,kBAACvC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,UACV,uBAAGqC,UAAU,QAAQzC","file":"static/js/32.768e2f00.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Form, Button } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport matrixChainOrder from \"../../Algorithms/ChainMatrixMultiplication\";\n\nconst ChainMatrixMultiplication = () => {\n  const [chainOrder, setChainOrder] = useState(0);\n\n  const updateChainMultiplication = () => {\n    let data = document.getElementById(\"chain_matrix_multiplication\").value.split(\" \");\n    data = data.map((item) => parseInt(item));\n    if (isNaN(data[data.length - 1])) data.pop();\n    setChainOrder(matrixChainOrder(data, 1));\n    // console.log(chainOrder);\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Matrix Chain Multiplication\">\n            The problem consists of finding the best way (order) of multiplying a set of matrices.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12}>\n          <Card title=\"Input\">\n            <Row>\n              <Col>\n                <Form>\n                  <Form.Group>\n                    <Form.Label>Matrixs</Form.Label>\n                    <Form.Control\n                      id=\"chain_matrix_multiplication\"\n                      onChange={updateChainMultiplication}\n                      as=\"textarea\"\n                      placeholder=\"1 2 3...\"\n                      rows=\"3\"\n                    />\n                    <Form.Text className=\"text-muted\">Kindly Input Numbers with space</Form.Text>\n                  </Form.Group>\n                </Form>\n              </Col>\n            </Row>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card title=\"Output\">\n            <p className=\"ml-3\">{chainOrder}</p>\n          </Card>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default ChainMatrixMultiplication;\n","export default function MatrixChainOrder(matrixArray, i) {\n  let dp = Array(10).fill(Array(10).fill(-1)),\n    j = matrixArray.length - 1;\n  if (i == j) return 0;\n  // console.log(\"first step passed\");\n  if (dp[i][j] != -1) return dp[i][j];\n\n  dp[i][j] = Infinity;\n  for (let k = i; k < j; k++) {\n    dp[i][j] = Math.min(\n      dp[i][j],\n      MatrixChainOrder(matrixArray, i, k) +\n        MatrixChainOrder(matrixArray, k + 1, j) +\n        matrixArray[i - 1] * matrixArray[k] * matrixArray[j]\n    );\n  }\n  console.log(dp);\n  return dp[i][j];\n}\n"],"sourceRoot":""}