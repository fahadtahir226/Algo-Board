{"version":3,"sources":["Algorithms/LevenshteinDistance.js","Screens/Strings/LevenshteinDistance.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["levenshteinDistance","a","b","distanceMatrix","Array","length","fill","map","i","j","indicator","Math","min","LevenshteinDistance","_useState","useState","_useState2","Object","slicedToArray","str1","setStr1","_useState3","_useState4","str2","setStr2","_useState5","_useState6","dist","setDist","react_default","createElement","_Aux","Row","Col","MainCard","title","CardDeck","md","Form","Group","controlId","Label","Control","defaultValue","id","onChange","firstSeq","document","getElementById","value","type","placeholder","Text","className","secondSeq","_createWithBsPrefix__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__"],"mappings":"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","file":"static/js/26.aa2331b0.chunk.js","sourcesContent":["/**\n * @param {string} a\n * @param {string} b\n * @return {number}\n */\nexport default function levenshteinDistance(a, b) {\n  // Create empty edit distance matrix for all possible modifications of\n  // substrings of a to substrings of b.\n  const distanceMatrix = Array(b.length + 1)\n    .fill(null)\n    .map(() => Array(a.length + 1).fill(null));\n\n  // Fill the first row of the matrix.\n  // If this is first row then we're transforming empty string to a.\n  // In this case the number of transformations equals to size of a substring.\n  for (let i = 0; i <= a.length; i += 1) {\n    distanceMatrix[0][i] = i;\n  }\n\n  // Fill the first column of the matrix.\n  // If this is first column then we're transforming empty string to b.\n  // In this case the number of transformations equals to size of b substring.\n  for (let j = 0; j <= b.length; j += 1) {\n    distanceMatrix[j][0] = j;\n  }\n\n  for (let j = 1; j <= b.length; j += 1) {\n    for (let i = 1; i <= a.length; i += 1) {\n      const indicator = a[i - 1] === b[j - 1] ? 0 : 1;\n      distanceMatrix[j][i] = Math.min(\n        distanceMatrix[j][i - 1] + 1, // deletion\n        distanceMatrix[j - 1][i] + 1, // insertion\n        distanceMatrix[j - 1][i - 1] + indicator // substitution\n      );\n    }\n  }\n\n  return distanceMatrix[b.length][a.length];\n}\n","import React, { useState } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport levenshteinDistance from \"../../Algorithms/LevenshteinDistance\";\n\nconst LevenshteinDistance = () => {\n  const [str1, setStr1] = useState(\"\");\n  const [str2, setStr2] = useState(\"\");\n  const [dist, setDist] = useState(0);\n\n  const updateStr1 = () => {\n    let firstSeq = document.getElementById(\"str1\").value;\n    setStr1(firstSeq);\n    setDist(levenshteinDistance(firstSeq, str2));\n  };\n  const updateStr2 = () => {\n    let secondSeq = document.getElementById(\"str2\").value;\n    setStr2(secondSeq);\n    setDist(levenshteinDistance(str1, secondSeq));\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Levenshtein Distance\">\n            The Levenshtein distance is a string metric for measuring difference between two\n            sequences. Informally, the Levenshtein distance between two words is the minimum number\n            of single-character edits (i.e. insertions, deletions or substitutions) required to\n            change one word into the other.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\">\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"formBasicEmail\">\n                      <Form.Label>First String</Form.Label>\n                      <Form.Control\n                        defaultValue={str1}\n                        id=\"str1\"\n                        onChange={updateStr1}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input First String</Form.Text>\n                    </Form.Group>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                      <Form.Label>Second String</Form.Label>\n                      <Form.Control\n                        defaultValue={str2}\n                        id=\"str2\"\n                        onChange={updateStr2}\n                        type=\"text\"\n                        placeholder=\"My String...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Second String</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">Levenshtein Distance: {dist}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default LevenshteinDistance;\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}