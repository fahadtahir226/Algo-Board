{"version":3,"sources":["Algorithms/RodCutting.js","Screens/Maths/RodCutting.js","../node_modules/react-bootstrap/esm/CardDeck.js"],"names":["RodCudding","price","rodLength","max_val","Number","NEGATIVE_INFINITY","i","Math","max","RodCutting","useState","prices","setPrices","rodCut","setRodCut","init","setInit","useEffect","console","log","rodCutting","Row","Col","title","CardDeck","isOption","setSample","sampleNum","md","Form","Group","controlId","Label","Control","defaultValue","onChange","new_prices","document","getElementById","value","split","map","parseInt","isNaN","length","pop","type","placeholder","Text","className","createWithBsPrefix"],"mappings":"qMAOA,MAAMA,EAAa,CAACC,EAAOC,KACzB,GAAIA,GAAa,IAAMA,EAAW,OAAO,EAEzC,IAAIC,EAAUC,OAAOC,kBAIrB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAWI,IAC7BH,EAAUI,KAAKC,IAAIL,EAASF,EAAMK,GAAKN,EAAWC,EAAOC,EAAYI,EAAI,IAC3E,OAAOH,GAGMH,QCqDAS,UAjEI,KAAO,MAAD,EACKC,mBAAS,IADd,mBAChBC,EADgB,KACRC,EADQ,OAEKF,mBAAS,OAFd,mBAEhBG,EAFgB,KAERC,EAFQ,OAGCJ,oBAAS,GAHV,mBAGhBK,EAHgB,KAGVC,EAHU,KAKvBC,oBAAU,KACRC,QAAQC,IAAIC,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,KACpD,IAkBH,OACE,kBAAC,IAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMC,MAAM,eAAZ,2MAOJ,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACE,EAAA,EAAD,KACE,kBAAC,IAAD,CAAMD,MAAM,QAAQE,UAAQ,EAACC,UAjBpBC,IACjBT,QAAQC,IAAIQ,KAiBF,kBAACN,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKM,GAAI,IACP,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,UACpB,kBAACF,EAAA,EAAKG,MAAN,qBACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,aAAcvB,EACdwB,SAtCD,KACnB,IAAIC,EAAaC,SAASC,eAAe,UAAUC,MACnD3B,EAAUwB,GAEVA,EAAaA,EAAWI,MAAM,KAAKC,IAAKxC,GAAUyC,SAASzC,IAEvD0C,MAAMP,EAAWA,EAAWQ,OAAS,KACvCR,EAAWS,MAEb3B,QAAQC,IAAI,cAAeiB,GAC3BtB,EAAUM,EAAWgB,EAAYA,EAAWQ,SAC5C5B,GAAQ,IA4BY8B,KAAK,OACLC,YAAY,cAEd,kBAAClB,EAAA,EAAKmB,KAAN,CAAWC,UAAU,cAArB,wCAMV,kBAAC,IAAD,CAAM1B,MAAM,UAAUR,EAAOF,EAAS,kB,gCChElD,YACeqC,gBAAmB","file":"static/js/28.904705e1.chunk.js","sourcesContent":["/**\n * @param {number[]} price\n * @param {number} rodLength\n * @return {number}\n */\n/* Returns the best obtainable price for a rod of length n and \n   price[] as prices of different pieces */\nconst RodCudding = (price, rodLength) => {\n  if (rodLength <= 0 || !rodLength) return 0;\n  // console.log(rodLength);\n  let max_val = Number.NEGATIVE_INFINITY;\n\n  // Recursively cut the rod in different pieces and compare different\n  // configurations\n  for (let i = 0; i < rodLength; i++)\n    max_val = Math.max(max_val, price[i] + RodCudding(price, rodLength - i - 1));\n  return max_val;\n};\n\nexport default RodCudding;\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Form, CardDeck } from \"react-bootstrap\";\n\nimport Aux from \"../../hoc/_Aux\";\nimport Card from \"../../App/components/MainCard\";\nimport rodCutting from \"../../Algorithms/RodCutting\";\n\nconst RodCutting = () => {\n  const [prices, setPrices] = useState(\"\");\n  const [rodCut, setRodCut] = useState(\"---\");\n  const [init, setInit] = useState(false);\n\n  useEffect(() => {\n    console.log(rodCutting([1, 5, 8, 9, 10, 17, 17, 20], 8));\n  }, []);\n\n  const updatePrices = () => {\n    let new_prices = document.getElementById(\"prices\").value;\n    setPrices(new_prices);\n\n    new_prices = new_prices.split(\" \").map((price) => parseInt(price));\n    // console.log(\"after converting\", new_prices);\n    if (isNaN(new_prices[new_prices.length - 1])) {\n      new_prices.pop();\n    }\n    console.log(\"calculating\", new_prices);\n    setRodCut(rodCutting(new_prices, new_prices.length));\n    setInit(true);\n  };\n  const setSample = (sampleNum) => {\n    console.log(sampleNum);\n  };\n  return (\n    <Aux>\n      <Row>\n        <Col>\n          <Card title=\"Rod Cutting\">\n            Given a rod of length n inches and an array of prices that contains prices of all pieces\n            of size smaller than n. Determine the maximum value obtainable by cutting up the rod and\n            selling the pieces.\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CardDeck>\n            <Card title=\"Input\" isOption setSample={setSample}>\n              <Row>\n                <Col md={12}>\n                  <Form>\n                    <Form.Group controlId=\"prices\">\n                      <Form.Label>Input Prices</Form.Label>\n                      <Form.Control\n                        defaultValue={prices}\n                        onChange={updatePrices}\n                        type=\"text\"\n                        placeholder=\"1 2 3 ...\"\n                      />\n                      <Form.Text className=\"text-muted\">Kindly Input Prices with Spaces</Form.Text>\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n            </Card>\n            <Card title=\"Output\">{init ? rodCut : \"No Input\"}</Card>\n          </CardDeck>\n        </Col>\n      </Row>\n    </Aux>\n  );\n};\n\nexport default RodCutting;\n","import createWithBsPrefix from './createWithBsPrefix';\nexport default createWithBsPrefix('card-deck');"],"sourceRoot":""}